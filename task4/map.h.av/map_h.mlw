
theory Axiomatic_Padding 
                           use why3.Bool.Bool 
                           
end

theory Int32_of_Int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int32.t = (Int32.of_int (Int16.to_int n))
  
end

theory Bit_int32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int32_of_Int16
  
  use export enum.Bit_int32_of_bit_int16
  
end

theory Int64_of_Int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int64.t = (Int64.of_int (Int16.to_int n))
  
end

theory Bit_int64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int64_of_Int16
  
  use export enum.Bit_int64_of_bit_int16
  
end

theory Int64_of_Int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int64.t = (Int64.of_int (Int32.to_int n))
  
end

theory Bit_int64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int64_of_Int32
  
  use export enum.Bit_int64_of_bit_int32
  
end

theory Int8_of_Int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Int8.t = (Int8.of_int (Int16.to_int n))
  
end

theory Bit_int8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Int8_of_Int16
  
  use export enum.Bit_int8_of_bit_int16
  
end

theory Int8_of_Int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int8.t = (Int8.of_int (Int32.to_int n))
  
end

theory Bit_int8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int8_of_Int32
  
  use export enum.Bit_int8_of_bit_int32
  
end

theory Int8_of_Int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int8.t = (Int8.of_int (Int64.to_int n))
  
end

theory Bit_int8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int8_of_Int64
  
  use export enum.Bit_int8_of_bit_int64
  
end

theory Uint16_of_Int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint16.t = (Uint16.of_int (Int16.to_int n))
  
end

theory Bit_uint16_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint16_of_Int16
  
  use export enum.Bit_uint16_of_bit_int16
  
end

theory Uint16_of_Int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint16.t = (Uint16.of_int (Int32.to_int n))
  
end

theory Bit_uint16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint16_of_Int32
  
  use export enum.Bit_uint16_of_bit_int32
  
end

theory Uint16_of_Int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint16.t = (Uint16.of_int (Int64.to_int n))
  
end

theory Bit_uint16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint16_of_Int64
  
  use export enum.Bit_uint16_of_bit_int64
  
end

theory Uint16_of_Int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint16.t = (Uint16.of_int (Int8.to_int n))
  
end

theory Bit_uint16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint16_of_Int8
  
  use export enum.Bit_uint16_of_bit_int8
  
end

theory Uint32_of_Int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint32.t = (Uint32.of_int (Int16.to_int n))
  
end

theory Bit_uint32_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint32_of_Int16
  
  use export enum.Bit_uint32_of_bit_int16
  
end

theory Uint32_of_Int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint32.t = (Uint32.of_int (Int32.to_int n))
  
end

theory Bit_uint32_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint32_of_Int32
  
  use export enum.Bit_uint32_of_bit_int32
  
end

theory Uint32_of_Int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint32.t = (Uint32.of_int (Int64.to_int n))
  
end

theory Bit_uint32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint32_of_Int64
  
  use export enum.Bit_uint32_of_bit_int64
  
end

theory Uint32_of_Int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint32.t = (Uint32.of_int (Int8.to_int n))
  
end

theory Bit_uint32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint32_of_Int8
  
  use export enum.Bit_uint32_of_bit_int8
  
end

theory Uint32_of_Uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint32.t = (Uint32.of_int (Uint16.to_int n))
  
end

theory Bit_uint32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint16
  
  use export enum.Bit_uint32_of_bit_uint16
  
end

theory Uint64_of_Int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint64.t = (Uint64.of_int (Int16.to_int n))
  
end

theory Bit_uint64_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint64_of_Int16
  
  use export enum.Bit_uint64_of_bit_int16
  
end

theory Uint64_of_Int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint64.t = (Uint64.of_int (Int32.to_int n))
  
end

theory Bit_uint64_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint64_of_Int32
  
  use export enum.Bit_uint64_of_bit_int32
  
end

theory Uint64_of_Int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint64.t = (Uint64.of_int (Int64.to_int n))
  
end

theory Bit_uint64_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint64_of_Int64
  
  use export enum.Bit_uint64_of_bit_int64
  
end

theory Uint64_of_Int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint64.t = (Uint64.of_int (Int8.to_int n))
  
end

theory Bit_uint64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint64_of_Int8
  
  use export enum.Bit_uint64_of_bit_int8
  
end

theory Uint64_of_Uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint64.t = (Uint64.of_int (Uint16.to_int n))
  
end

theory Bit_uint64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint16
  
  use export enum.Bit_uint64_of_bit_uint16
  
end

theory Uint64_of_Uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint64.t = (Uint64.of_int (Uint32.to_int n))
  
end

theory Bit_uint64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint32
  
  use export enum.Bit_uint64_of_bit_uint32
  
end

theory Uint8_of_Int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int16.t) : Uint8.t = (Uint8.of_int (Int16.to_int n))
  
end

theory Bit_uint8_of_Bit_int16

  use why3.Bool.Bool 
  
  use export Uint8_of_Int16
  
  use export enum.Bit_uint8_of_bit_int16
  
end

theory Uint8_of_Int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Uint8.t = (Uint8.of_int (Int32.to_int n))
  
end

theory Bit_uint8_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Uint8_of_Int32
  
  use export enum.Bit_uint8_of_bit_int32
  
end

theory Uint8_of_Int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Uint8.t = (Uint8.of_int (Int64.to_int n))
  
end

theory Bit_uint8_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Uint8_of_Int64
  
  use export enum.Bit_uint8_of_bit_int64
  
end

theory Uint8_of_Int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Uint8.t = (Uint8.of_int (Int8.to_int n))
  
end

theory Bit_uint8_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Uint8_of_Int8
  
  use export enum.Bit_uint8_of_bit_int8
  
end

theory Uint8_of_Uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Uint8.t = (Uint8.of_int (Uint16.to_int n))
  
end

theory Bit_uint8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint16
  
  use export enum.Bit_uint8_of_bit_uint16
  
end

theory Uint8_of_Uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint8.t = (Uint8.of_int (Uint32.to_int n))
  
end

theory Bit_uint8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint32
  
  use export enum.Bit_uint8_of_bit_uint32
  
end

theory Uint8_of_Uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint8.t = (Uint8.of_int (Uint64.to_int n))
  
end

theory Bit_uint8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint8_of_Uint64
  
  use export enum.Bit_uint8_of_bit_uint64
  
end

theory Int16_of_Int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int32.t) : Int16.t = (Int16.of_int (Int32.to_int n))
  
end

theory Bit_int16_of_Bit_int32

  use why3.Bool.Bool 
  
  use export Int16_of_Int32
  
  use export enum.Bit_int16_of_bit_int32
  
end

theory Int16_of_Int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int16.t = (Int16.of_int (Int64.to_int n))
  
end

theory Bit_int16_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int16_of_Int64
  
  use export enum.Bit_int16_of_bit_int64
  
end

theory Int32_of_Int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int64.t) : Int32.t = (Int32.of_int (Int64.to_int n))
  
end

theory Bit_int32_of_Bit_int64

  use why3.Bool.Bool 
  
  use export Int32_of_Int64
  
  use export enum.Bit_int32_of_bit_int64
  
end

theory Int16_of_Int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int16.t = (Int16.of_int (Int8.to_int n))
  
end

theory Bit_int16_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int16_of_Int8
  
  use export enum.Bit_int16_of_bit_int8
  
end

theory Int32_of_Int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int32.t = (Int32.of_int (Int8.to_int n))
  
end

theory Bit_int32_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int32_of_Int8
  
  use export enum.Bit_int32_of_bit_int8
  
end

theory Int64_of_Int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Int8.t) : Int64.t = (Int64.of_int (Int8.to_int n))
  
end

theory Bit_int64_of_Bit_int8

  use why3.Bool.Bool 
  
  use export Int64_of_Int8
  
  use export enum.Bit_int64_of_bit_int8
  
end

theory Int16_of_Uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int16.t = (Int16.of_int (Uint16.to_int n))
  
end

theory Bit_int16_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int16_of_Uint16
  
  use export enum.Bit_int16_of_bit_uint16
  
end

theory Int32_of_Uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int32.t = (Int32.of_int (Uint16.to_int n))
  
end

theory Bit_int32_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int32_of_Uint16
  
  use export enum.Bit_int32_of_bit_uint16
  
end

theory Int64_of_Uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int64.t = (Int64.of_int (Uint16.to_int n))
  
end

theory Bit_int64_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int64_of_Uint16
  
  use export enum.Bit_int64_of_bit_uint16
  
end

theory Int8_of_Uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint16.t) : Int8.t = (Int8.of_int (Uint16.to_int n))
  
end

theory Bit_int8_of_Bit_uint16

  use why3.Bool.Bool 
  
  use export Int8_of_Uint16
  
  use export enum.Bit_int8_of_bit_uint16
  
end

theory Int16_of_Uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int16.t = (Int16.of_int (Uint32.to_int n))
  
end

theory Bit_int16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int16_of_Uint32
  
  use export enum.Bit_int16_of_bit_uint32
  
end

theory Int32_of_Uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int32.t = (Int32.of_int (Uint32.to_int n))
  
end

theory Bit_int32_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int32_of_Uint32
  
  use export enum.Bit_int32_of_bit_uint32
  
end

theory Int64_of_Uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int64.t = (Int64.of_int (Uint32.to_int n))
  
end

theory Bit_int64_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int64_of_Uint32
  
  use export enum.Bit_int64_of_bit_uint32
  
end

theory Int8_of_Uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Int8.t = (Int8.of_int (Uint32.to_int n))
  
end

theory Bit_int8_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Int8_of_Uint32
  
  use export enum.Bit_int8_of_bit_uint32
  
end

theory Uint16_of_Uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint32.t) : Uint16.t = (Uint16.of_int (Uint32.to_int n))
  
end

theory Bit_uint16_of_Bit_uint32

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint32
  
  use export enum.Bit_uint16_of_bit_uint32
  
end

theory Int16_of_Uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int16.t = (Int16.of_int (Uint64.to_int n))
  
end

theory Bit_int16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int16_of_Uint64
  
  use export enum.Bit_int16_of_bit_uint64
  
end

theory Int32_of_Uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int32.t = (Int32.of_int (Uint64.to_int n))
  
end

theory Bit_int32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int32_of_Uint64
  
  use export enum.Bit_int32_of_bit_uint64
  
end

theory Int64_of_Uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int64.t = (Int64.of_int (Uint64.to_int n))
  
end

theory Bit_int64_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int64_of_Uint64
  
  use export enum.Bit_int64_of_bit_uint64
  
end

theory Int8_of_Uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Int8.t = (Int8.of_int (Uint64.to_int n))
  
end

theory Bit_int8_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Int8_of_Uint64
  
  use export enum.Bit_int8_of_bit_uint64
  
end

theory Uint16_of_Uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint16.t = (Uint16.of_int (Uint64.to_int n))
  
end

theory Bit_uint16_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint64
  
  use export enum.Bit_uint16_of_bit_uint64
  
end

theory Uint32_of_Uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint64.t) : Uint32.t = (Uint32.of_int (Uint64.to_int n))
  
end

theory Bit_uint32_of_Bit_uint64

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint64
  
  use export enum.Bit_uint32_of_bit_uint64
  
end

theory Int16_of_Uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int16.t = (Int16.of_int (Uint8.to_int n))
  
end

theory Bit_int16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int16_of_Uint8
  
  use export enum.Bit_int16_of_bit_uint8
  
end

theory Int32_of_Uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int32.t = (Int32.of_int (Uint8.to_int n))
  
end

theory Bit_int32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int32_of_Uint8
  
  use export enum.Bit_int32_of_bit_uint8
  
end

theory Int64_of_Uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int64.t = (Int64.of_int (Uint8.to_int n))
  
end

theory Bit_int64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int64_of_Uint8
  
  use export enum.Bit_int64_of_bit_uint8
  
end

theory Int8_of_Uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Int8.t = (Int8.of_int (Uint8.to_int n))
  
end

theory Bit_int8_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Int8_of_Uint8
  
  use export enum.Bit_int8_of_bit_uint8
  
end

theory Uint16_of_Uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint16.t = (Uint16.of_int (Uint8.to_int n))
  
end

theory Bit_uint16_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint16_of_Uint8
  
  use export enum.Bit_uint16_of_bit_uint8
  
end

theory Uint32_of_Uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint32.t = (Uint32.of_int (Uint8.to_int n))
  
end

theory Bit_uint32_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint32_of_Uint8
  
  use export enum.Bit_uint32_of_bit_uint8
  
end

theory Uint64_of_Uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  function cast (n : Uint8.t) : Uint64.t = (Uint64.of_int (Uint8.to_int n))
  
end

theory Bit_uint64_of_Bit_uint8

  use why3.Bool.Bool 
  
  use export Uint64_of_Uint8
  
  use export enum.Bit_uint64_of_bit_uint8
  
end

module Unsafe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint8

  use why3.Bool.Bool 
  
  use import enum.Uint8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint8

  use why3.Bool.Bool 
  
  use import enum.Bit_uint8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint64

  use why3.Bool.Bool 
  
  use import enum.Uint64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint64

  use why3.Bool.Bool 
  
  use import enum.Bit_uint64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint32

  use why3.Bool.Bool 
  
  use import enum.Uint32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint32

  use why3.Bool.Bool 
  
  use import enum.Bit_uint32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_uint16

  use why3.Bool.Bool 
  
  use import enum.Uint16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_uint16

  use why3.Bool.Bool 
  
  use import enum.Bit_uint16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int8

  use why3.Bool.Bool 
  
  use import enum.Int8 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int8

  use why3.Bool.Bool 
  
  use import enum.Bit_int8 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int64

  use why3.Bool.Bool 
  
  use import enum.Int64 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int64

  use why3.Bool.Bool 
  
  use import enum.Bit_int64 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int32

  use why3.Bool.Bool 
  
  use import enum.Int32 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int32

  use why3.Bool.Bool 
  
  use import enum.Bit_int32 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Unsafe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Unsafe_enum with namespace . = .
  
end

module Safe_int16

  use why3.Bool.Bool 
  
  use import enum.Int16 
  
  clone export enum.Generic_enum with namespace . = .
  
  clone export enum.Safe_enum with namespace . = .
  
end

module Unsafe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Unsafe_bit_enum with namespace . = .
  
end

module Safe_bit_int16

  use why3.Bool.Bool 
  
  use import enum.Bit_int16 
  
  clone export enum.Generic_bit_enum with namespace . = .
  
  clone export enum.Safe_bit_enum with namespace . = .
  
end

module Globals_simple

  use why3.Bool.Bool 
  
end

theory Root_voidP

  use why3.Bool.Bool 
  
  use import core.Voidp 
  
end

module Root_voidP_safe

  use why3.Bool.Bool 
  
end

module Root_voidP_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Value_3_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Value_3_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Map_5_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Map_5_unsafe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Key_2_safe

  use why3.Bool.Bool 
  
end

module Root___anonstruct_Key_2_unsafe

  use why3.Bool.Bool 
  
end

theory Logic_type_padding

  use why3.Bool.Bool 
  
  type padding 
  
end

theory Root___anonstruct_Key_2

  use why3.Bool.Bool 
  
  type __anonstruct_Key_2 
  
end

theory Root___anonstruct_Value_3

  use why3.Bool.Bool 
  
  type __anonstruct_Value_3 
  
end

theory Struct_voidP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Voidp_tag_id 
  
  predicate frame_tag_struct_voidP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_voidP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (tag_fresh voidP_tag_table p)
  
  predicate fresh_alloc_struct_voidP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (alloc_fresh voidP_alloc_table p)
  
  predicate container_of_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_voidP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) voidP_tag)
  
  predicate typeof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) voidP_tag))))
  
  predicate instanceof_singleton_struct_voidP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p voidP_tag)
  
  predicate instanceof_struct_voidP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p voidP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) voidP_tag))))
  
  predicate right_valid_struct_voidP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((>=) (offset_max voidP_alloc_table p) b)
  
  predicate left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((<=) (offset_min voidP_alloc_table p) a)
  
  predicate strict_left_valid_struct_voidP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = ((=) (offset_min voidP_alloc_table p) a)
  
  predicate valid_struct_voidP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  =
     (((<=) (offset_min voidP_alloc_table p) a) /\
     ((>=) (offset_max voidP_alloc_table p) b))
  
  predicate strict_valid_struct_voidP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  =
     (((=) (offset_min voidP_alloc_table p) a) /\
     ((=) (offset_max voidP_alloc_table p) b))
  
end

theory Struct___anonstruct_Value_3

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Value_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Value_3_tag  : (tag_id
  __anonstruct_Value_3)
  
  axiom U___anonstruct_Value_3_parenttag_bottom  :
  (parenttag __anonstruct_Value_3_tag bottom_tag)
  
  axiom U___anonstruct_Value_3_is_final  :
  (forall __anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3).
   (forall p : (pointer __anonstruct_Value_3).
    ((instanceof __anonstruct_Value_3_tag_table p __anonstruct_Value_3_tag)
     ->
     ((=) (typeof __anonstruct_Value_3_tag_table p) __anonstruct_Value_3_tag))))
  
  predicate frame_tag_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (old___anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3)) (__anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3))
  =
     ((tag_extends old___anonstruct_Value_3_tag_table
      __anonstruct_Value_3_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Value_3_tag_table
     __anonstruct_Value_3_tag_table p))
  
  predicate frame_free_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (old___anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3)) (__anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3))
  =
     ((free_extends old___anonstruct_Value_3_alloc_table
      __anonstruct_Value_3_alloc_table)
     /\
     (free_block old___anonstruct_Value_3_alloc_table
     __anonstruct_Value_3_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (n : int) (old___anonstruct_Value_3_alloc_table :
  (alloc_table __anonstruct_Value_3)) (__anonstruct_Value_3_alloc_table :
  (alloc_table __anonstruct_Value_3))
  =
     ((alloc_extends old___anonstruct_Value_3_alloc_table
      __anonstruct_Value_3_alloc_table)
     /\
     (alloc_block old___anonstruct_Value_3_alloc_table
     __anonstruct_Value_3_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (n : int) (__anonstruct_Value_3_tag_table :
  (tag_table __anonstruct_Value_3))
  = (tag_fresh __anonstruct_Value_3_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (n : int) (__anonstruct_Value_3_alloc_table :
  (alloc_table __anonstruct_Value_3))
  = (alloc_fresh __anonstruct_Value_3_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (__anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3)) = true
  
  predicate container_of_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (l : int) (r : int) (__anonstruct_Value_3_tag_table
  : (tag_table __anonstruct_Value_3)) = true
  
  predicate typeof_singleton_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (__anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3))
  = ((=) (typeof __anonstruct_Value_3_tag_table p) __anonstruct_Value_3_tag)
  
  predicate typeof_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (l : int) (r : int) (__anonstruct_Value_3_tag_table
  : (tag_table __anonstruct_Value_3))
  =
     (((=) (typeof __anonstruct_Value_3_tag_table p) __anonstruct_Value_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Value_3_tag_table (shift p i))
       __anonstruct_Value_3_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (__anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3))
  = (instanceof __anonstruct_Value_3_tag_table p __anonstruct_Value_3_tag)
  
  predicate instanceof_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (l : int) (r : int) (__anonstruct_Value_3_tag_table
  : (tag_table __anonstruct_Value_3))
  =
     ((instanceof __anonstruct_Value_3_tag_table p __anonstruct_Value_3_tag)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Value_3_tag_table (shift p i)
       __anonstruct_Value_3_tag))))
  
  predicate right_valid_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (b : int) (__anonstruct_Value_3_alloc_table :
  (alloc_table __anonstruct_Value_3))
  = ((>=) (offset_max __anonstruct_Value_3_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (a : int) (__anonstruct_Value_3_alloc_table :
  (alloc_table __anonstruct_Value_3))
  = ((<=) (offset_min __anonstruct_Value_3_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (a : int) (__anonstruct_Value_3_alloc_table :
  (alloc_table __anonstruct_Value_3))
  = ((=) (offset_min __anonstruct_Value_3_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (a : int) (b : int)
  (__anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  =
     (((<=) (offset_min __anonstruct_Value_3_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Value_3_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Value_3 (p : (pointer
  __anonstruct_Value_3)) (a : int) (b : int)
  (__anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  =
     (((=) (offset_min __anonstruct_Value_3_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Value_3_alloc_table p) b))
  
  axiom U___anonstruct_Value_3_int  :
  ((=) (int_of_tag __anonstruct_Value_3_tag) (7))
  
end

theory Struct___anonstruct_Key_2

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Key_2_tag  : (tag_id
  __anonstruct_Key_2)
  
  axiom U___anonstruct_Key_2_parenttag_bottom  :
  (parenttag __anonstruct_Key_2_tag bottom_tag)
  
  axiom U___anonstruct_Key_2_is_final  :
  (forall __anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2).
   (forall p : (pointer __anonstruct_Key_2).
    ((instanceof __anonstruct_Key_2_tag_table p __anonstruct_Key_2_tag) ->
     ((=) (typeof __anonstruct_Key_2_tag_table p) __anonstruct_Key_2_tag))))
  
  predicate frame_tag_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (old___anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2)) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2))
  =
     ((tag_extends old___anonstruct_Key_2_tag_table
      __anonstruct_Key_2_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Key_2_tag_table
     __anonstruct_Key_2_tag_table p))
  
  predicate frame_free_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (old___anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2))
  =
     ((free_extends old___anonstruct_Key_2_alloc_table
      __anonstruct_Key_2_alloc_table)
     /\
     (free_block old___anonstruct_Key_2_alloc_table
     __anonstruct_Key_2_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (n : int) (old___anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2)) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  =
     ((alloc_extends old___anonstruct_Key_2_alloc_table
      __anonstruct_Key_2_alloc_table)
     /\
     (alloc_block old___anonstruct_Key_2_alloc_table
     __anonstruct_Key_2_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (n : int) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2)) = (tag_fresh __anonstruct_Key_2_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (n : int) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  = (alloc_fresh __anonstruct_Key_2_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2)) = true
  
  predicate container_of_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (l : int) (r : int) (__anonstruct_Key_2_tag_table :
  (tag_table __anonstruct_Key_2)) = true
  
  predicate typeof_singleton_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2))
  = ((=) (typeof __anonstruct_Key_2_tag_table p) __anonstruct_Key_2_tag)
  
  predicate typeof_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (l : int) (r : int) (__anonstruct_Key_2_tag_table :
  (tag_table __anonstruct_Key_2))
  =
     (((=) (typeof __anonstruct_Key_2_tag_table p) __anonstruct_Key_2_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Key_2_tag_table (shift p i))
       __anonstruct_Key_2_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2))
  = (instanceof __anonstruct_Key_2_tag_table p __anonstruct_Key_2_tag)
  
  predicate instanceof_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (l : int) (r : int) (__anonstruct_Key_2_tag_table :
  (tag_table __anonstruct_Key_2))
  =
     ((instanceof __anonstruct_Key_2_tag_table p __anonstruct_Key_2_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Key_2_tag_table (shift p i)
       __anonstruct_Key_2_tag))))
  
  predicate right_valid_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (b : int) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  = ((>=) (offset_max __anonstruct_Key_2_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (a : int) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  = ((<=) (offset_min __anonstruct_Key_2_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (a : int) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  = ((=) (offset_min __anonstruct_Key_2_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (a : int) (b : int) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  =
     (((<=) (offset_min __anonstruct_Key_2_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Key_2_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Key_2 (p : (pointer
  __anonstruct_Key_2)) (a : int) (b : int) (__anonstruct_Key_2_alloc_table :
  (alloc_table __anonstruct_Key_2))
  =
     (((=) (offset_min __anonstruct_Key_2_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Key_2_alloc_table p) b))
  
  axiom U___anonstruct_Key_2_int  :
  ((=) (int_of_tag __anonstruct_Key_2_tag) (5))
  
end

theory Struct___anonstruct_Item_4

  use import core.Voidp_tag_id 
  
  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Struct_voidP 
  
  use import Struct___anonstruct_Value_3 
  
  use import Struct___anonstruct_Key_2 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Key_2 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Item_4_tag  : (tag_id
  voidP)
  
  axiom U___anonstruct_Item_4_parenttag_voidP  :
  (parenttag __anonstruct_Item_4_tag voidP_tag)
  
  axiom U___anonstruct_Item_4_is_final  :
  (forall voidP_tag_table : (tag_table voidP).
   (forall p : (pointer voidP).
    ((instanceof voidP_tag_table p __anonstruct_Item_4_tag) ->
     ((=) (typeof voidP_tag_table p) __anonstruct_Item_4_tag))))
  
  predicate frame_tag_struct___anonstruct_Item_4 (p : (pointer voidP))
  (old___anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (__anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (old___anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (__anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (old_voidP_tag_table : (tag_table voidP)) (voidP_tag_table : (tag_table
  voidP)) (__anonstruct_Item_4_key : (memory voidP (pointer
  __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory voidP (pointer
  __anonstruct_Value_3)))
  =
     ((tag_extends old___anonstruct_Key_2_tag_table
      __anonstruct_Key_2_tag_table)
     /\
     ((alloc_tag_blockset old___anonstruct_Key_2_tag_table
      __anonstruct_Key_2_tag_table
      (pset_singleton (select __anonstruct_Item_4_key p)))
     /\
     ((tag_extends old___anonstruct_Value_3_tag_table
      __anonstruct_Value_3_tag_table)
     /\
     ((alloc_tag_blockset old___anonstruct_Value_3_tag_table
      __anonstruct_Value_3_tag_table
      (pset_singleton (select __anonstruct_Item_4_value p)))
     /\
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))))))
  
  predicate frame_free_struct___anonstruct_Item_4 (p : (pointer voidP))
  (old___anonstruct_Key_2_alloc_table : (alloc_table __anonstruct_Key_2))
  (__anonstruct_Key_2_alloc_table : (alloc_table __anonstruct_Key_2))
  (old___anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  (__anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP)) (__anonstruct_Item_4_key : (memory voidP (pointer
  __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory voidP (pointer
  __anonstruct_Value_3)))
  =
     ((free_extends old___anonstruct_Key_2_alloc_table
      __anonstruct_Key_2_alloc_table)
     /\
     ((alloc_blockset old___anonstruct_Key_2_alloc_table
      __anonstruct_Key_2_alloc_table
      (pset_singleton (select __anonstruct_Item_4_key p)))
     /\
     ((free_extends old___anonstruct_Value_3_alloc_table
      __anonstruct_Value_3_alloc_table)
     /\
     ((alloc_blockset old___anonstruct_Value_3_alloc_table
      __anonstruct_Value_3_alloc_table
      (pset_singleton (select __anonstruct_Item_4_value p)))
     /\
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))))))
  
  predicate frame_alloc_struct___anonstruct_Item_4 (p : (pointer voidP)) (n :
  int) (old___anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2)) (old___anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3)) (__anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3)) (old_voidP_alloc_table : (alloc_table voidP))
  (voidP_alloc_table : (alloc_table voidP)) (__anonstruct_Item_4_key :
  (memory voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value :
  (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((alloc_extends old___anonstruct_Key_2_alloc_table
      __anonstruct_Key_2_alloc_table)
     /\
     ((alloc_blockset old___anonstruct_Key_2_alloc_table
      __anonstruct_Key_2_alloc_table
      (pset_singleton (select __anonstruct_Item_4_key p)))
     /\
     ((alloc_extends old___anonstruct_Value_3_alloc_table
      __anonstruct_Value_3_alloc_table)
     /\
     ((alloc_blockset old___anonstruct_Value_3_alloc_table
      __anonstruct_Value_3_alloc_table
      (pset_singleton (select __anonstruct_Item_4_value p)))
     /\
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))))))
  
  predicate fresh_tag_struct___anonstruct_Item_4 (p : (pointer voidP)) (n :
  int) (__anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (__anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (voidP_tag_table : (tag_table voidP)) (__anonstruct_Item_4_key : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory
  voidP (pointer __anonstruct_Value_3)))
  =
     ((fresh_tag_struct_voidP p n voidP_tag_table) /\
     ((fresh_tag_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) (0)
      __anonstruct_Value_3_tag_table)
     /\
     ((fresh_tag_struct___anonstruct_Key_2 (select __anonstruct_Item_4_key p)
      (0) __anonstruct_Key_2_tag_table)
     /\
     (forall i : int.
      ((instanceof voidP_tag_table (shift p i) __anonstruct_Item_4_tag) ->
       ((fresh_tag_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i)) (0)
        __anonstruct_Value_3_tag_table)
       /\
       (fresh_tag_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i)) (0)
       __anonstruct_Key_2_tag_table)))))))
  
  predicate fresh_alloc_struct___anonstruct_Item_4 (p : (pointer voidP)) (n :
  int) (__anonstruct_Key_2_alloc_table : (alloc_table __anonstruct_Key_2))
  (__anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  (voidP_alloc_table : (alloc_table voidP)) (__anonstruct_Item_4_key :
  (memory voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value :
  (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((fresh_alloc_struct_voidP p n voidP_alloc_table) /\
     ((fresh_alloc_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) (0)
      __anonstruct_Value_3_alloc_table)
     /\
     ((fresh_alloc_struct___anonstruct_Key_2
      (select __anonstruct_Item_4_key p) (0) __anonstruct_Key_2_alloc_table)
     /\
     (forall i : int.
      ((((<=) (0) i) /\ ((<=) i n)) ->
       ((fresh_alloc_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i)) (0)
        __anonstruct_Value_3_alloc_table)
       /\
       (fresh_alloc_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i)) (0)
       __anonstruct_Key_2_alloc_table)))))))
  
  predicate container_of_singleton_struct___anonstruct_Item_4 (p : (pointer
  voidP)) (__anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (__anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (voidP_tag_table : (tag_table voidP)) (__anonstruct_Item_4_key : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory
  voidP (pointer __anonstruct_Value_3)))
  =
     ((container_of_singleton_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) __anonstruct_Value_3_tag_table)
     /\
     (container_of_singleton_struct___anonstruct_Key_2
     (select __anonstruct_Item_4_key p) __anonstruct_Key_2_tag_table))
  
  predicate container_of_struct___anonstruct_Item_4 (p : (pointer voidP)) (l
  : int) (r : int) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2)) (__anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3)) (voidP_tag_table : (tag_table voidP))
  (__anonstruct_Item_4_key : (memory voidP (pointer __anonstruct_Key_2)))
  (__anonstruct_Item_4_value : (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((container_of_singleton_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) __anonstruct_Value_3_tag_table)
     /\
     ((container_of_singleton_struct___anonstruct_Key_2
      (select __anonstruct_Item_4_key p) __anonstruct_Key_2_tag_table)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((container_of_singleton_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i))
        __anonstruct_Value_3_tag_table)
       /\
       (container_of_singleton_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i))
       __anonstruct_Key_2_tag_table))))))
  
  predicate typeof_singleton_struct___anonstruct_Item_4 (p : (pointer voidP))
  (__anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (__anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (voidP_tag_table : (tag_table voidP)) (__anonstruct_Item_4_key : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory
  voidP (pointer __anonstruct_Value_3)))
  =
     (((=) (typeof voidP_tag_table p) __anonstruct_Item_4_tag) /\
     ((typeof_singleton_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) __anonstruct_Value_3_tag_table)
     /\
     (typeof_singleton_struct___anonstruct_Key_2
     (select __anonstruct_Item_4_key p) __anonstruct_Key_2_tag_table)))
  
  predicate typeof_struct___anonstruct_Item_4 (p : (pointer voidP)) (l : int)
  (r : int) (__anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (__anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (voidP_tag_table : (tag_table voidP)) (__anonstruct_Item_4_key : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory
  voidP (pointer __anonstruct_Value_3)))
  =
     (((=) (typeof voidP_tag_table p) __anonstruct_Item_4_tag) /\
     ((typeof_singleton_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) __anonstruct_Value_3_tag_table)
     /\
     ((typeof_singleton_struct___anonstruct_Key_2
      (select __anonstruct_Item_4_key p) __anonstruct_Key_2_tag_table)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (((=) (typeof voidP_tag_table (shift p i)) __anonstruct_Item_4_tag) /\
       ((typeof_singleton_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i))
        __anonstruct_Value_3_tag_table)
       /\
       (typeof_singleton_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i))
       __anonstruct_Key_2_tag_table))))))))
  
  predicate instanceof_singleton_struct___anonstruct_Item_4 (p : (pointer
  voidP)) (__anonstruct_Key_2_tag_table : (tag_table __anonstruct_Key_2))
  (__anonstruct_Value_3_tag_table : (tag_table __anonstruct_Value_3))
  (voidP_tag_table : (tag_table voidP)) (__anonstruct_Item_4_key : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value : (memory
  voidP (pointer __anonstruct_Value_3)))
  =
     ((instanceof voidP_tag_table p __anonstruct_Item_4_tag) /\
     ((instanceof_singleton_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) __anonstruct_Value_3_tag_table)
     /\
     (instanceof_singleton_struct___anonstruct_Key_2
     (select __anonstruct_Item_4_key p) __anonstruct_Key_2_tag_table)))
  
  predicate instanceof_struct___anonstruct_Item_4 (p : (pointer voidP)) (l :
  int) (r : int) (__anonstruct_Key_2_tag_table : (tag_table
  __anonstruct_Key_2)) (__anonstruct_Value_3_tag_table : (tag_table
  __anonstruct_Value_3)) (voidP_tag_table : (tag_table voidP))
  (__anonstruct_Item_4_key : (memory voidP (pointer __anonstruct_Key_2)))
  (__anonstruct_Item_4_value : (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((instanceof voidP_tag_table p __anonstruct_Item_4_tag) /\
     ((instanceof_singleton_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) __anonstruct_Value_3_tag_table)
     /\
     ((instanceof_singleton_struct___anonstruct_Key_2
      (select __anonstruct_Item_4_key p) __anonstruct_Key_2_tag_table)
     /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((instanceof voidP_tag_table (shift p i) __anonstruct_Item_4_tag) /\
       ((instanceof_singleton_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i))
        __anonstruct_Value_3_tag_table)
       /\
       (instanceof_singleton_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i))
       __anonstruct_Key_2_tag_table))))))))
  
  predicate right_valid_struct___anonstruct_Item_4 (p : (pointer voidP)) (b :
  int) (__anonstruct_Key_2_alloc_table : (alloc_table __anonstruct_Key_2))
  (__anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  (voidP_alloc_table : (alloc_table voidP)) (__anonstruct_Item_4_key :
  (memory voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value :
  (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((right_valid_struct_voidP p b voidP_alloc_table) /\
     ((right_valid_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) (0)
      __anonstruct_Value_3_alloc_table)
     /\
     (right_valid_struct___anonstruct_Key_2
     (select __anonstruct_Item_4_key p) (0) __anonstruct_Key_2_alloc_table)))
  
  predicate left_valid_struct___anonstruct_Item_4 (p : (pointer voidP)) (a :
  int) (__anonstruct_Key_2_alloc_table : (alloc_table __anonstruct_Key_2))
  (__anonstruct_Value_3_alloc_table : (alloc_table __anonstruct_Value_3))
  (voidP_alloc_table : (alloc_table voidP)) (__anonstruct_Item_4_key :
  (memory voidP (pointer __anonstruct_Key_2))) (__anonstruct_Item_4_value :
  (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((left_valid_struct_voidP p a voidP_alloc_table) /\
     ((left_valid_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) (0)
      __anonstruct_Value_3_alloc_table)
     /\
     (left_valid_struct___anonstruct_Key_2 (select __anonstruct_Item_4_key p)
     (0) __anonstruct_Key_2_alloc_table)))
  
  predicate strict_left_valid_struct___anonstruct_Item_4 (p : (pointer
  voidP)) (a : int) (__anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3)) (voidP_alloc_table : (alloc_table voidP))
  (__anonstruct_Item_4_key : (memory voidP (pointer __anonstruct_Key_2)))
  (__anonstruct_Item_4_value : (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((strict_left_valid_struct_voidP p a voidP_alloc_table) /\
     ((left_valid_struct___anonstruct_Value_3
      (select __anonstruct_Item_4_value p) (0)
      __anonstruct_Value_3_alloc_table)
     /\
     (left_valid_struct___anonstruct_Key_2 (select __anonstruct_Item_4_key p)
     (0) __anonstruct_Key_2_alloc_table)))
  
  predicate valid_struct___anonstruct_Item_4 (p : (pointer voidP)) (a : int)
  (b : int) (__anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3)) (voidP_alloc_table : (alloc_table voidP))
  (__anonstruct_Item_4_key : (memory voidP (pointer __anonstruct_Key_2)))
  (__anonstruct_Item_4_value : (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((valid_struct_voidP p a b voidP_alloc_table) /\
     ((valid_struct___anonstruct_Value_3 (select __anonstruct_Item_4_value p)
      (0) (0) __anonstruct_Value_3_alloc_table)
     /\
     ((valid_struct___anonstruct_Key_2 (select __anonstruct_Item_4_key p) (0)
      (0) __anonstruct_Key_2_alloc_table)
     /\
     (forall i : int.
      ((((<=) a i) /\ ((<=) i b)) ->
       ((valid_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i)) (0) (0)
        __anonstruct_Value_3_alloc_table)
       /\
       (valid_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i)) (0) (0)
       __anonstruct_Key_2_alloc_table)))))))
  
  predicate strict_valid_struct___anonstruct_Item_4 (p : (pointer voidP)) (a
  : int) (b : int) (__anonstruct_Key_2_alloc_table : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Value_3_alloc_table : (alloc_table
  __anonstruct_Value_3)) (voidP_alloc_table : (alloc_table voidP))
  (__anonstruct_Item_4_key : (memory voidP (pointer __anonstruct_Key_2)))
  (__anonstruct_Item_4_value : (memory voidP (pointer __anonstruct_Value_3)))
  =
     ((strict_valid_struct_voidP p a b voidP_alloc_table) /\
     ((valid_struct___anonstruct_Value_3 (select __anonstruct_Item_4_value p)
      (0) (0) __anonstruct_Value_3_alloc_table)
     /\
     ((valid_struct___anonstruct_Key_2 (select __anonstruct_Item_4_key p) (0)
      (0) __anonstruct_Key_2_alloc_table)
     /\
     (forall i : int.
      ((((<=) a i) /\ ((<=) i b)) ->
       ((valid_struct___anonstruct_Value_3
        (select __anonstruct_Item_4_value (shift p i)) (0) (0)
        __anonstruct_Value_3_alloc_table)
       /\
       (valid_struct___anonstruct_Key_2
       (select __anonstruct_Item_4_key (shift p i)) (0) (0)
       __anonstruct_Key_2_alloc_table)))))))
  
  axiom U___anonstruct_Item_4_int  :
  ((=) (int_of_tag __anonstruct_Item_4_tag) (4))
  
end

module Struct___anonstruct_Item_4_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Item_4 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Item_4
  (p : (pointer voidP)) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
    (__anonstruct_Value_3_alloc_table : ref (alloc_table
     __anonstruct_Value_3)) 
     (voidP_alloc_table : ref (alloc_table voidP)) 
      (__anonstruct_Item_4_key : (memory voidP (pointer
       __anonstruct_Key_2))) 
       (__anonstruct_Item_4_value : (memory voidP (pointer
        __anonstruct_Value_3))) : unit
        requires {
          (("expl:Deallocation" ((=) p null)) \/
          (freeable !voidP_alloc_table p)) }
        writes { __anonstruct_Key_2_alloc_table,
        __anonstruct_Value_3_alloc_table, voidP_alloc_table }
        ensures {
          ((((=) p null) /\
           (((=) !__anonstruct_Key_2_alloc_table (old
            !__anonstruct_Key_2_alloc_table))
           /\
           (((=) !__anonstruct_Value_3_alloc_table (old
            !__anonstruct_Value_3_alloc_table))
           /\ ((=) !voidP_alloc_table (old !voidP_alloc_table)))))
          \/
          ((frame_free_struct___anonstruct_Item_4 p (old
           !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table
           (old !__anonstruct_Value_3_alloc_table)
           !__anonstruct_Value_3_alloc_table (old !voidP_alloc_table)
           !voidP_alloc_table __anonstruct_Item_4_key
           __anonstruct_Item_4_value)
          /\
          (fresh_alloc_struct___anonstruct_Item_4 p
          (offset_max (old !voidP_alloc_table) p)
          !__anonstruct_Key_2_alloc_table !__anonstruct_Value_3_alloc_table
          !voidP_alloc_table __anonstruct_Item_4_key
          __anonstruct_Item_4_value))) }
  
  val allocate_struct___anonstruct_Item_4_requires
  (n : int) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
    (__anonstruct_Value_3_alloc_table : ref (alloc_table
     __anonstruct_Value_3)) 
     (voidP_alloc_table : ref (alloc_table voidP)) 
      (__anonstruct_Key_2_tag_table : ref (tag_table __anonstruct_Key_2)) 
       (__anonstruct_Value_3_tag_table : ref (tag_table
        __anonstruct_Value_3)) 
        (voidP_tag_table : ref (tag_table voidP)) 
         (__anonstruct_Item_4_key : (memory voidP (pointer
          __anonstruct_Key_2))) 
          (__anonstruct_Item_4_value : (memory voidP (pointer
           __anonstruct_Value_3))) : (pointer voidP)
           requires { ((>=) n (0)) } writes { __anonstruct_Key_2_alloc_table,
           __anonstruct_Key_2_tag_table, __anonstruct_Value_3_alloc_table,
           __anonstruct_Value_3_tag_table, voidP_alloc_table, voidP_tag_table
           }
           ensures {
             ((strict_valid_struct___anonstruct_Item_4 result (0)
              (Int.(-) n (1)) !__anonstruct_Key_2_alloc_table
              !__anonstruct_Value_3_alloc_table !voidP_alloc_table
              __anonstruct_Item_4_key __anonstruct_Item_4_value)
             /\
             ((frame_alloc_struct___anonstruct_Item_4 result n (old
              !__anonstruct_Key_2_alloc_table)
              !__anonstruct_Key_2_alloc_table (old
              !__anonstruct_Value_3_alloc_table)
              !__anonstruct_Value_3_alloc_table (old !voidP_alloc_table)
              !voidP_alloc_table __anonstruct_Item_4_key
              __anonstruct_Item_4_value)
             /\
             ((frame_tag_struct___anonstruct_Item_4 result (old
              !__anonstruct_Key_2_tag_table) !__anonstruct_Key_2_tag_table
              (old !__anonstruct_Value_3_tag_table)
              !__anonstruct_Value_3_tag_table (old !voidP_tag_table)
              !voidP_tag_table __anonstruct_Item_4_key
              __anonstruct_Item_4_value)
             /\
             ((fresh_alloc_struct___anonstruct_Item_4 result (Int.(-) n (1))
              (old !__anonstruct_Key_2_alloc_table) (old
              !__anonstruct_Value_3_alloc_table) (old !voidP_alloc_table)
              __anonstruct_Item_4_key __anonstruct_Item_4_value)
             /\
             ((fresh_tag_struct___anonstruct_Item_4 result (Int.(-) n (1))
              (old !__anonstruct_Key_2_tag_table) (old
              !__anonstruct_Value_3_tag_table) (old !voidP_tag_table)
              __anonstruct_Item_4_key __anonstruct_Item_4_value)
             /\
             ((typeof_struct___anonstruct_Item_4 result (0) n
              !__anonstruct_Key_2_tag_table !__anonstruct_Value_3_tag_table
              !voidP_tag_table __anonstruct_Item_4_key
              __anonstruct_Item_4_value)
             /\
             (container_of_struct___anonstruct_Item_4 result (0) n
             !__anonstruct_Key_2_tag_table !__anonstruct_Value_3_tag_table
             !voidP_tag_table __anonstruct_Item_4_key
             __anonstruct_Item_4_value))))))) }
  
end

module Struct___anonstruct_Item_4_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Item_4 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Item_4
  (p : (pointer voidP)) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
    (__anonstruct_Value_3_alloc_table : ref (alloc_table
     __anonstruct_Value_3)) 
     (voidP_alloc_table : ref (alloc_table voidP)) 
      (__anonstruct_Item_4_key : (memory voidP (pointer
       __anonstruct_Key_2))) 
       (__anonstruct_Item_4_value : (memory voidP (pointer
        __anonstruct_Value_3))) : unit
        requires { true } writes { __anonstruct_Key_2_alloc_table,
        __anonstruct_Value_3_alloc_table, voidP_alloc_table }
        ensures {
          ((((=) p null) /\
           (((=) !__anonstruct_Key_2_alloc_table (old
            !__anonstruct_Key_2_alloc_table))
           /\
           (((=) !__anonstruct_Value_3_alloc_table (old
            !__anonstruct_Value_3_alloc_table))
           /\ ((=) !voidP_alloc_table (old !voidP_alloc_table)))))
          \/
          ((frame_free_struct___anonstruct_Item_4 p (old
           !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table
           (old !__anonstruct_Value_3_alloc_table)
           !__anonstruct_Value_3_alloc_table (old !voidP_alloc_table)
           !voidP_alloc_table __anonstruct_Item_4_key
           __anonstruct_Item_4_value)
          /\
          (fresh_alloc_struct___anonstruct_Item_4 p
          (offset_max (old !voidP_alloc_table) p)
          !__anonstruct_Key_2_alloc_table !__anonstruct_Value_3_alloc_table
          !voidP_alloc_table __anonstruct_Item_4_key
          __anonstruct_Item_4_value))) }
  
  val allocate_struct___anonstruct_Item_4
  (n : int) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
    (__anonstruct_Value_3_alloc_table : ref (alloc_table
     __anonstruct_Value_3)) 
     (voidP_alloc_table : ref (alloc_table voidP)) 
      (__anonstruct_Key_2_tag_table : ref (tag_table __anonstruct_Key_2)) 
       (__anonstruct_Value_3_tag_table : ref (tag_table
        __anonstruct_Value_3)) 
        (voidP_tag_table : ref (tag_table voidP)) 
         (__anonstruct_Item_4_key : (memory voidP (pointer
          __anonstruct_Key_2))) 
          (__anonstruct_Item_4_value : (memory voidP (pointer
           __anonstruct_Value_3))) : (pointer voidP)
           requires { true } writes { __anonstruct_Key_2_alloc_table,
           __anonstruct_Key_2_tag_table, __anonstruct_Value_3_alloc_table,
           __anonstruct_Value_3_tag_table, voidP_alloc_table, voidP_tag_table
           }
           ensures {
             ((strict_valid_struct___anonstruct_Item_4 result (0)
              (Int.(-) n (1)) !__anonstruct_Key_2_alloc_table
              !__anonstruct_Value_3_alloc_table !voidP_alloc_table
              __anonstruct_Item_4_key __anonstruct_Item_4_value)
             /\
             ((frame_alloc_struct___anonstruct_Item_4 result n (old
              !__anonstruct_Key_2_alloc_table)
              !__anonstruct_Key_2_alloc_table (old
              !__anonstruct_Value_3_alloc_table)
              !__anonstruct_Value_3_alloc_table (old !voidP_alloc_table)
              !voidP_alloc_table __anonstruct_Item_4_key
              __anonstruct_Item_4_value)
             /\
             ((frame_tag_struct___anonstruct_Item_4 result (old
              !__anonstruct_Key_2_tag_table) !__anonstruct_Key_2_tag_table
              (old !__anonstruct_Value_3_tag_table)
              !__anonstruct_Value_3_tag_table (old !voidP_tag_table)
              !voidP_tag_table __anonstruct_Item_4_key
              __anonstruct_Item_4_value)
             /\
             ((fresh_alloc_struct___anonstruct_Item_4 result (Int.(-) n (1))
              (old !__anonstruct_Key_2_alloc_table) (old
              !__anonstruct_Value_3_alloc_table) (old !voidP_alloc_table)
              __anonstruct_Item_4_key __anonstruct_Item_4_value)
             /\
             ((fresh_tag_struct___anonstruct_Item_4 result (Int.(-) n (1))
              (old !__anonstruct_Key_2_tag_table) (old
              !__anonstruct_Value_3_tag_table) (old !voidP_tag_table)
              __anonstruct_Item_4_key __anonstruct_Item_4_value)
             /\
             ((typeof_struct___anonstruct_Item_4 result (0) n
              !__anonstruct_Key_2_tag_table !__anonstruct_Value_3_tag_table
              !voidP_tag_table __anonstruct_Item_4_key
              __anonstruct_Item_4_value)
             /\
             (container_of_struct___anonstruct_Item_4 result (0) n
             !__anonstruct_Key_2_tag_table !__anonstruct_Value_3_tag_table
             !voidP_tag_table __anonstruct_Item_4_key
             __anonstruct_Item_4_value))))))) }
  
  val allocate_singleton_struct___anonstruct_Item_4
  (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
   (__anonstruct_Value_3_alloc_table : ref (alloc_table
    __anonstruct_Value_3)) 
    (voidP_alloc_table : ref (alloc_table voidP)) 
     (__anonstruct_Key_2_tag_table : ref (tag_table __anonstruct_Key_2)) 
      (__anonstruct_Value_3_tag_table : ref (tag_table
       __anonstruct_Value_3)) 
       (voidP_tag_table : ref (tag_table voidP)) 
        (__anonstruct_Item_4_key : (memory voidP (pointer
         __anonstruct_Key_2))) 
         (__anonstruct_Item_4_value : (memory voidP (pointer
          __anonstruct_Value_3))) : (pointer voidP)
          requires { true } writes { __anonstruct_Key_2_alloc_table,
          __anonstruct_Key_2_tag_table, __anonstruct_Value_3_alloc_table,
          __anonstruct_Value_3_tag_table, voidP_alloc_table, voidP_tag_table
          }
          ensures {
            ((strict_valid_struct___anonstruct_Item_4 result (0) (0)
             !__anonstruct_Key_2_alloc_table
             !__anonstruct_Value_3_alloc_table !voidP_alloc_table
             __anonstruct_Item_4_key __anonstruct_Item_4_value)
            /\
            ((frame_alloc_struct___anonstruct_Item_4 result (1) (old
             !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table
             (old !__anonstruct_Value_3_alloc_table)
             !__anonstruct_Value_3_alloc_table (old !voidP_alloc_table)
             !voidP_alloc_table __anonstruct_Item_4_key
             __anonstruct_Item_4_value)
            /\
            ((frame_tag_struct___anonstruct_Item_4 result (old
             !__anonstruct_Key_2_tag_table) !__anonstruct_Key_2_tag_table
             (old !__anonstruct_Value_3_tag_table)
             !__anonstruct_Value_3_tag_table (old !voidP_tag_table)
             !voidP_tag_table __anonstruct_Item_4_key
             __anonstruct_Item_4_value)
            /\
            ((fresh_alloc_struct___anonstruct_Item_4 result (0) (old
             !__anonstruct_Key_2_alloc_table) (old
             !__anonstruct_Value_3_alloc_table) (old !voidP_alloc_table)
             __anonstruct_Item_4_key __anonstruct_Item_4_value)
            /\
            ((fresh_tag_struct___anonstruct_Item_4 result (0) (old
             !__anonstruct_Key_2_tag_table) (old
             !__anonstruct_Value_3_tag_table) (old !voidP_tag_table)
             __anonstruct_Item_4_key __anonstruct_Item_4_value)
            /\
            ((typeof_singleton_struct___anonstruct_Item_4 result
             !__anonstruct_Key_2_tag_table !__anonstruct_Value_3_tag_table
             !voidP_tag_table __anonstruct_Item_4_key
             __anonstruct_Item_4_value)
            /\
            (container_of_singleton_struct___anonstruct_Item_4 result
            !__anonstruct_Key_2_tag_table !__anonstruct_Value_3_tag_table
            !voidP_tag_table __anonstruct_Item_4_key
            __anonstruct_Item_4_value))))))) }
  
end

module Struct___anonstruct_Key_2_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Key_2 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Key_2
  (p : (pointer __anonstruct_Key_2)) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) :
    unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Key_2_alloc_table p)) }
    writes { __anonstruct_Key_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Key_2_alloc_table (old
       !__anonstruct_Key_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Key_2 p (old
       !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Key_2 p
      (offset_max (old !__anonstruct_Key_2_alloc_table) p)
      !__anonstruct_Key_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Key_2_requires
  (n : int) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
    (__anonstruct_Key_2_tag_table : ref (tag_table __anonstruct_Key_2)) :
     (pointer __anonstruct_Key_2)
     requires { ((>=) n (0)) } writes { __anonstruct_Key_2_alloc_table,
     __anonstruct_Key_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Key_2 result (0) (Int.(-) n (1))
        !__anonstruct_Key_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Key_2 result n (old
        !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Key_2 result (old
        !__anonstruct_Key_2_tag_table) !__anonstruct_Key_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Key_2 result (Int.(-) n (1)) (old
        !__anonstruct_Key_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Key_2 result (Int.(-) n (1)) (old
        !__anonstruct_Key_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Key_2 result (0) n
        !__anonstruct_Key_2_tag_table)
       /\
       (container_of_struct___anonstruct_Key_2 result (0) n
       !__anonstruct_Key_2_tag_table))))))) }
  
end

module Struct___anonstruct_Key_2_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Key_2 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Key_2
  (p : (pointer __anonstruct_Key_2)) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) :
    unit
    requires { true } writes { __anonstruct_Key_2_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Key_2_alloc_table (old
       !__anonstruct_Key_2_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Key_2 p (old
       !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Key_2 p
      (offset_max (old !__anonstruct_Key_2_alloc_table) p)
      !__anonstruct_Key_2_alloc_table))) }
  
  val allocate_struct___anonstruct_Key_2
  (n : int) 
   (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
    (__anonstruct_Key_2_tag_table : ref (tag_table __anonstruct_Key_2)) :
     (pointer __anonstruct_Key_2)
     requires { true } writes { __anonstruct_Key_2_alloc_table,
     __anonstruct_Key_2_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Key_2 result (0) (Int.(-) n (1))
        !__anonstruct_Key_2_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Key_2 result n (old
        !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Key_2 result (old
        !__anonstruct_Key_2_tag_table) !__anonstruct_Key_2_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Key_2 result (Int.(-) n (1)) (old
        !__anonstruct_Key_2_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Key_2 result (Int.(-) n (1)) (old
        !__anonstruct_Key_2_tag_table))
       /\
       ((typeof_struct___anonstruct_Key_2 result (0) n
        !__anonstruct_Key_2_tag_table)
       /\
       (container_of_struct___anonstruct_Key_2 result (0) n
       !__anonstruct_Key_2_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Key_2
  (__anonstruct_Key_2_alloc_table : ref (alloc_table __anonstruct_Key_2)) 
   (__anonstruct_Key_2_tag_table : ref (tag_table __anonstruct_Key_2)) :
    (pointer __anonstruct_Key_2)
    requires { true } writes { __anonstruct_Key_2_alloc_table,
    __anonstruct_Key_2_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Key_2 result (0) (0)
       !__anonstruct_Key_2_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Key_2 result (1) (old
       !__anonstruct_Key_2_alloc_table) !__anonstruct_Key_2_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Key_2 result (old
       !__anonstruct_Key_2_tag_table) !__anonstruct_Key_2_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Key_2 result (0) (old
       !__anonstruct_Key_2_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Key_2 result (0) (old
       !__anonstruct_Key_2_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Key_2 result
       !__anonstruct_Key_2_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Key_2 result
      !__anonstruct_Key_2_tag_table))))))) }
  
end

theory Root___anonstruct_Map_5

  use why3.Bool.Bool 
  
  type __anonstruct_Map_5 
  
end

theory Struct___anonstruct_Map_5

  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import core.Tag_id 
  
  use import core.Tag 
  
  use import Root___anonstruct_Map_5 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  function __anonstruct_Map_5_tag  : (tag_id
  __anonstruct_Map_5)
  
  axiom U___anonstruct_Map_5_parenttag_bottom  :
  (parenttag __anonstruct_Map_5_tag bottom_tag)
  
  axiom U___anonstruct_Map_5_is_final  :
  (forall __anonstruct_Map_5_tag_table : (tag_table __anonstruct_Map_5).
   (forall p : (pointer __anonstruct_Map_5).
    ((instanceof __anonstruct_Map_5_tag_table p __anonstruct_Map_5_tag) ->
     ((=) (typeof __anonstruct_Map_5_tag_table p) __anonstruct_Map_5_tag))))
  
  predicate frame_tag_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (old___anonstruct_Map_5_tag_table : (tag_table
  __anonstruct_Map_5)) (__anonstruct_Map_5_tag_table : (tag_table
  __anonstruct_Map_5))
  =
     ((tag_extends old___anonstruct_Map_5_tag_table
      __anonstruct_Map_5_tag_table)
     /\
     (alloc_tag_block old___anonstruct_Map_5_tag_table
     __anonstruct_Map_5_tag_table p))
  
  predicate frame_free_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (old___anonstruct_Map_5_alloc_table : (alloc_table
  __anonstruct_Map_5)) (__anonstruct_Map_5_alloc_table : (alloc_table
  __anonstruct_Map_5))
  =
     ((free_extends old___anonstruct_Map_5_alloc_table
      __anonstruct_Map_5_alloc_table)
     /\
     (free_block old___anonstruct_Map_5_alloc_table
     __anonstruct_Map_5_alloc_table p))
  
  predicate frame_alloc_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (n : int) (old___anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5)) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  =
     ((alloc_extends old___anonstruct_Map_5_alloc_table
      __anonstruct_Map_5_alloc_table)
     /\
     (alloc_block old___anonstruct_Map_5_alloc_table
     __anonstruct_Map_5_alloc_table p n))
  
  predicate fresh_tag_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (n : int) (__anonstruct_Map_5_tag_table : (tag_table
  __anonstruct_Map_5)) = (tag_fresh __anonstruct_Map_5_tag_table p)
  
  predicate fresh_alloc_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (n : int) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  = (alloc_fresh __anonstruct_Map_5_alloc_table p)
  
  predicate container_of_singleton_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (__anonstruct_Map_5_tag_table : (tag_table
  __anonstruct_Map_5)) = true
  
  predicate container_of_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (l : int) (r : int) (__anonstruct_Map_5_tag_table :
  (tag_table __anonstruct_Map_5)) = true
  
  predicate typeof_singleton_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (__anonstruct_Map_5_tag_table : (tag_table
  __anonstruct_Map_5))
  = ((=) (typeof __anonstruct_Map_5_tag_table p) __anonstruct_Map_5_tag)
  
  predicate typeof_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (l : int) (r : int) (__anonstruct_Map_5_tag_table :
  (tag_table __anonstruct_Map_5))
  =
     (((=) (typeof __anonstruct_Map_5_tag_table p) __anonstruct_Map_5_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof __anonstruct_Map_5_tag_table (shift p i))
       __anonstruct_Map_5_tag))))
  
  predicate instanceof_singleton_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (__anonstruct_Map_5_tag_table : (tag_table
  __anonstruct_Map_5))
  = (instanceof __anonstruct_Map_5_tag_table p __anonstruct_Map_5_tag)
  
  predicate instanceof_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (l : int) (r : int) (__anonstruct_Map_5_tag_table :
  (tag_table __anonstruct_Map_5))
  =
     ((instanceof __anonstruct_Map_5_tag_table p __anonstruct_Map_5_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof __anonstruct_Map_5_tag_table (shift p i)
       __anonstruct_Map_5_tag))))
  
  predicate right_valid_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (b : int) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  = ((>=) (offset_max __anonstruct_Map_5_alloc_table p) b)
  
  predicate left_valid_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (a : int) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  = ((<=) (offset_min __anonstruct_Map_5_alloc_table p) a)
  
  predicate strict_left_valid_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (a : int) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  = ((=) (offset_min __anonstruct_Map_5_alloc_table p) a)
  
  predicate valid_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (a : int) (b : int) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  =
     (((<=) (offset_min __anonstruct_Map_5_alloc_table p) a) /\
     ((>=) (offset_max __anonstruct_Map_5_alloc_table p) b))
  
  predicate strict_valid_struct___anonstruct_Map_5 (p : (pointer
  __anonstruct_Map_5)) (a : int) (b : int) (__anonstruct_Map_5_alloc_table :
  (alloc_table __anonstruct_Map_5))
  =
     (((=) (offset_min __anonstruct_Map_5_alloc_table p) a) /\
     ((=) (offset_max __anonstruct_Map_5_alloc_table p) b))
  
  axiom U___anonstruct_Map_5_int  :
  ((=) (int_of_tag __anonstruct_Map_5_tag) (6))
  
end

module Struct___anonstruct_Map_5_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Map_5 
  
  use import Root___anonstruct_Map_5 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Map_5
  (p : (pointer __anonstruct_Map_5)) 
   (__anonstruct_Map_5_alloc_table : ref (alloc_table __anonstruct_Map_5)) :
    unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Map_5_alloc_table p)) }
    writes { __anonstruct_Map_5_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Map_5_alloc_table (old
       !__anonstruct_Map_5_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Map_5 p (old
       !__anonstruct_Map_5_alloc_table) !__anonstruct_Map_5_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Map_5 p
      (offset_max (old !__anonstruct_Map_5_alloc_table) p)
      !__anonstruct_Map_5_alloc_table))) }
  
  val allocate_struct___anonstruct_Map_5_requires
  (n : int) 
   (__anonstruct_Map_5_alloc_table : ref (alloc_table __anonstruct_Map_5)) 
    (__anonstruct_Map_5_tag_table : ref (tag_table __anonstruct_Map_5)) :
     (pointer __anonstruct_Map_5)
     requires { ((>=) n (0)) } writes { __anonstruct_Map_5_alloc_table,
     __anonstruct_Map_5_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Map_5 result (0) (Int.(-) n (1))
        !__anonstruct_Map_5_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Map_5 result n (old
        !__anonstruct_Map_5_alloc_table) !__anonstruct_Map_5_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Map_5 result (old
        !__anonstruct_Map_5_tag_table) !__anonstruct_Map_5_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Map_5 result (Int.(-) n (1)) (old
        !__anonstruct_Map_5_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Map_5 result (Int.(-) n (1)) (old
        !__anonstruct_Map_5_tag_table))
       /\
       ((typeof_struct___anonstruct_Map_5 result (0) n
        !__anonstruct_Map_5_tag_table)
       /\
       (container_of_struct___anonstruct_Map_5 result (0) n
       !__anonstruct_Map_5_tag_table))))))) }
  
end

module Struct___anonstruct_Map_5_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Map_5 
  
  use import Root___anonstruct_Map_5 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Map_5
  (p : (pointer __anonstruct_Map_5)) 
   (__anonstruct_Map_5_alloc_table : ref (alloc_table __anonstruct_Map_5)) :
    unit
    requires { true } writes { __anonstruct_Map_5_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Map_5_alloc_table (old
       !__anonstruct_Map_5_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Map_5 p (old
       !__anonstruct_Map_5_alloc_table) !__anonstruct_Map_5_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Map_5 p
      (offset_max (old !__anonstruct_Map_5_alloc_table) p)
      !__anonstruct_Map_5_alloc_table))) }
  
  val allocate_struct___anonstruct_Map_5
  (n : int) 
   (__anonstruct_Map_5_alloc_table : ref (alloc_table __anonstruct_Map_5)) 
    (__anonstruct_Map_5_tag_table : ref (tag_table __anonstruct_Map_5)) :
     (pointer __anonstruct_Map_5)
     requires { true } writes { __anonstruct_Map_5_alloc_table,
     __anonstruct_Map_5_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Map_5 result (0) (Int.(-) n (1))
        !__anonstruct_Map_5_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Map_5 result n (old
        !__anonstruct_Map_5_alloc_table) !__anonstruct_Map_5_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Map_5 result (old
        !__anonstruct_Map_5_tag_table) !__anonstruct_Map_5_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Map_5 result (Int.(-) n (1)) (old
        !__anonstruct_Map_5_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Map_5 result (Int.(-) n (1)) (old
        !__anonstruct_Map_5_tag_table))
       /\
       ((typeof_struct___anonstruct_Map_5 result (0) n
        !__anonstruct_Map_5_tag_table)
       /\
       (container_of_struct___anonstruct_Map_5 result (0) n
       !__anonstruct_Map_5_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Map_5
  (__anonstruct_Map_5_alloc_table : ref (alloc_table __anonstruct_Map_5)) 
   (__anonstruct_Map_5_tag_table : ref (tag_table __anonstruct_Map_5)) :
    (pointer __anonstruct_Map_5)
    requires { true } writes { __anonstruct_Map_5_alloc_table,
    __anonstruct_Map_5_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Map_5 result (0) (0)
       !__anonstruct_Map_5_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Map_5 result (1) (old
       !__anonstruct_Map_5_alloc_table) !__anonstruct_Map_5_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Map_5 result (old
       !__anonstruct_Map_5_tag_table) !__anonstruct_Map_5_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Map_5 result (0) (old
       !__anonstruct_Map_5_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Map_5 result (0) (old
       !__anonstruct_Map_5_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Map_5 result
       !__anonstruct_Map_5_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Map_5 result
      !__anonstruct_Map_5_tag_table))))))) }
  
end

module Struct___anonstruct_Value_3_unsafe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Value_3 
  
  use import Root___anonstruct_Value_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct___anonstruct_Value_3
  (p : (pointer __anonstruct_Value_3)) 
   (__anonstruct_Value_3_alloc_table : ref (alloc_table
    __anonstruct_Value_3)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/
      (freeable !__anonstruct_Value_3_alloc_table p)) }
    writes { __anonstruct_Value_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Value_3_alloc_table (old
       !__anonstruct_Value_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Value_3 p (old
       !__anonstruct_Value_3_alloc_table) !__anonstruct_Value_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Value_3 p
      (offset_max (old !__anonstruct_Value_3_alloc_table) p)
      !__anonstruct_Value_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Value_3_requires
  (n : int) 
   (__anonstruct_Value_3_alloc_table : ref (alloc_table
    __anonstruct_Value_3)) 
    (__anonstruct_Value_3_tag_table : ref (tag_table __anonstruct_Value_3)) :
     (pointer __anonstruct_Value_3)
     requires { ((>=) n (0)) } writes { __anonstruct_Value_3_alloc_table,
     __anonstruct_Value_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Value_3 result (0) (Int.(-) n (1))
        !__anonstruct_Value_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Value_3 result n (old
        !__anonstruct_Value_3_alloc_table) !__anonstruct_Value_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Value_3 result (old
        !__anonstruct_Value_3_tag_table) !__anonstruct_Value_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Value_3 result (Int.(-) n (1)) (old
        !__anonstruct_Value_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Value_3 result (Int.(-) n (1)) (old
        !__anonstruct_Value_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Value_3 result (0) n
        !__anonstruct_Value_3_tag_table)
       /\
       (container_of_struct___anonstruct_Value_3 result (0) n
       !__anonstruct_Value_3_tag_table))))))) }
  
end

module Struct___anonstruct_Value_3_safe

  use import core.Tag_table_type 
  
  use import Struct___anonstruct_Value_3 
  
  use import Root___anonstruct_Value_3 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct___anonstruct_Value_3
  (p : (pointer __anonstruct_Value_3)) 
   (__anonstruct_Value_3_alloc_table : ref (alloc_table
    __anonstruct_Value_3)) : unit
    requires { true } writes { __anonstruct_Value_3_alloc_table }
    ensures {
      ((((=) p null) /\
       ((=) !__anonstruct_Value_3_alloc_table (old
       !__anonstruct_Value_3_alloc_table)))
      \/
      ((frame_free_struct___anonstruct_Value_3 p (old
       !__anonstruct_Value_3_alloc_table) !__anonstruct_Value_3_alloc_table)
      /\
      (fresh_alloc_struct___anonstruct_Value_3 p
      (offset_max (old !__anonstruct_Value_3_alloc_table) p)
      !__anonstruct_Value_3_alloc_table))) }
  
  val allocate_struct___anonstruct_Value_3
  (n : int) 
   (__anonstruct_Value_3_alloc_table : ref (alloc_table
    __anonstruct_Value_3)) 
    (__anonstruct_Value_3_tag_table : ref (tag_table __anonstruct_Value_3)) :
     (pointer __anonstruct_Value_3)
     requires { true } writes { __anonstruct_Value_3_alloc_table,
     __anonstruct_Value_3_tag_table }
     ensures {
       ((strict_valid_struct___anonstruct_Value_3 result (0) (Int.(-) n (1))
        !__anonstruct_Value_3_alloc_table)
       /\
       ((frame_alloc_struct___anonstruct_Value_3 result n (old
        !__anonstruct_Value_3_alloc_table) !__anonstruct_Value_3_alloc_table)
       /\
       ((frame_tag_struct___anonstruct_Value_3 result (old
        !__anonstruct_Value_3_tag_table) !__anonstruct_Value_3_tag_table)
       /\
       ((fresh_alloc_struct___anonstruct_Value_3 result (Int.(-) n (1)) (old
        !__anonstruct_Value_3_alloc_table))
       /\
       ((fresh_tag_struct___anonstruct_Value_3 result (Int.(-) n (1)) (old
        !__anonstruct_Value_3_tag_table))
       /\
       ((typeof_struct___anonstruct_Value_3 result (0) n
        !__anonstruct_Value_3_tag_table)
       /\
       (container_of_struct___anonstruct_Value_3 result (0) n
       !__anonstruct_Value_3_tag_table))))))) }
  
  val allocate_singleton_struct___anonstruct_Value_3
  (__anonstruct_Value_3_alloc_table : ref (alloc_table
   __anonstruct_Value_3)) 
   (__anonstruct_Value_3_tag_table : ref (tag_table __anonstruct_Value_3)) :
    (pointer __anonstruct_Value_3)
    requires { true } writes { __anonstruct_Value_3_alloc_table,
    __anonstruct_Value_3_tag_table }
    ensures {
      ((strict_valid_struct___anonstruct_Value_3 result (0) (0)
       !__anonstruct_Value_3_alloc_table)
      /\
      ((frame_alloc_struct___anonstruct_Value_3 result (1) (old
       !__anonstruct_Value_3_alloc_table) !__anonstruct_Value_3_alloc_table)
      /\
      ((frame_tag_struct___anonstruct_Value_3 result (old
       !__anonstruct_Value_3_tag_table) !__anonstruct_Value_3_tag_table)
      /\
      ((fresh_alloc_struct___anonstruct_Value_3 result (0) (old
       !__anonstruct_Value_3_alloc_table))
      /\
      ((fresh_tag_struct___anonstruct_Value_3 result (0) (old
       !__anonstruct_Value_3_tag_table))
      /\
      ((typeof_singleton_struct___anonstruct_Value_3 result
       !__anonstruct_Value_3_tag_table)
      /\
      (container_of_singleton_struct___anonstruct_Value_3 result
      !__anonstruct_Value_3_tag_table))))))) }
  
end

theory Struct_charP

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import core.Tag_table 
  
  use import Struct_voidP 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use import core.Alloc 
  
  use why3.Bool.Bool 
  
  use import core.Charp_tag_id 
  
  predicate frame_tag_struct_charP (p : (pointer voidP)) (old_voidP_tag_table
  : (tag_table voidP)) (voidP_tag_table : (tag_table voidP))
  =
     ((tag_extends old_voidP_tag_table voidP_tag_table) /\
     (alloc_tag_block old_voidP_tag_table voidP_tag_table p))
  
  predicate frame_free_struct_charP (p : (pointer voidP))
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((free_extends old_voidP_alloc_table voidP_alloc_table) /\
     (free_block old_voidP_alloc_table voidP_alloc_table p))
  
  predicate frame_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (old_voidP_alloc_table : (alloc_table voidP)) (voidP_alloc_table :
  (alloc_table voidP))
  =
     ((alloc_extends old_voidP_alloc_table voidP_alloc_table) /\
     (alloc_block old_voidP_alloc_table voidP_alloc_table p n))
  
  predicate fresh_tag_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_tag_table : (tag_table voidP))
  = (fresh_tag_struct_voidP p n voidP_tag_table)
  
  predicate fresh_alloc_struct_charP (p : (pointer voidP)) (n : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (fresh_alloc_struct_voidP p n voidP_alloc_table)
  
  predicate container_of_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP)) = true
  
  predicate container_of_struct_charP (p : (pointer voidP)) (l : int) (r :
  int) (voidP_tag_table : (tag_table voidP)) = true
  
  predicate typeof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = ((=) (typeof voidP_tag_table p) charP_tag)
  
  predicate typeof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     (((=) (typeof voidP_tag_table p) charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       ((=) (typeof voidP_tag_table (shift p i)) charP_tag))))
  
  predicate instanceof_singleton_struct_charP (p : (pointer voidP))
  (voidP_tag_table : (tag_table voidP))
  = (instanceof voidP_tag_table p charP_tag)
  
  predicate instanceof_struct_charP (p : (pointer voidP)) (l : int) (r : int)
  (voidP_tag_table : (tag_table voidP))
  =
     ((instanceof voidP_tag_table p charP_tag) /\
     (forall i : int.
      ((((<=) l i) /\ ((<) i r)) ->
       (instanceof voidP_tag_table (shift p i) charP_tag))))
  
  predicate right_valid_struct_charP (p : (pointer voidP)) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (right_valid_struct_voidP p b voidP_alloc_table)
  
  predicate left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate strict_left_valid_struct_charP (p : (pointer voidP)) (a : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (strict_left_valid_struct_voidP p a voidP_alloc_table)
  
  predicate valid_struct_charP (p : (pointer voidP)) (a : int) (b : int)
  (voidP_alloc_table : (alloc_table voidP))
  = (valid_struct_voidP p a b voidP_alloc_table)
  
  predicate strict_valid_struct_charP (p : (pointer voidP)) (a : int) (b :
  int) (voidP_alloc_table : (alloc_table voidP))
  = (strict_valid_struct_voidP p a b voidP_alloc_table)
  
end

module Struct_charP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_charP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_charP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_charP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_charP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_charP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_charP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_charP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_charP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_charP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_charP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_charP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_charP result (0) n !voidP_tag_table) /\
       (container_of_struct_charP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_charP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_charP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_charP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_charP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_charP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_charP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_charP result !voidP_tag_table) /\
      (container_of_singleton_struct_charP result !voidP_tag_table))))))) }
  
end

module Struct_voidP_unsafe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use import int.Int 
  
  use import core.Allocable 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires {
      (("expl:Deallocation" ((=) p null)) \/ (freeable !voidP_alloc_table p))
      }
    writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP_requires
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { ((>=) n (0)) } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
end

module Struct_voidP_safe

  use import core.Voidp 
  
  use import core.Tag_table_type 
  
  use import Struct_voidP 
  
  use import ref.Ref 
  
  use import core.Pointer 
  
  use int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val safe_free_struct_voidP
  (p : (pointer voidP)) 
   (voidP_alloc_table : ref (alloc_table voidP)) : unit
    requires { true } writes { voidP_alloc_table }
    ensures {
      ((((=) p null) /\ ((=) !voidP_alloc_table (old !voidP_alloc_table))) \/
      ((frame_free_struct_voidP p (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      (fresh_alloc_struct_voidP p (offset_max (old !voidP_alloc_table) p)
      !voidP_alloc_table))) }
  
  val allocate_struct_voidP
  (n : int) 
   (voidP_alloc_table : ref (alloc_table voidP)) 
    (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
     requires { true } writes { voidP_alloc_table, voidP_tag_table }
     ensures {
       ((strict_valid_struct_voidP result (0) (Int.(-) n (1))
        !voidP_alloc_table)
       /\
       ((frame_alloc_struct_voidP result n (old !voidP_alloc_table)
        !voidP_alloc_table)
       /\
       ((frame_tag_struct_voidP result (old !voidP_tag_table)
        !voidP_tag_table)
       /\
       ((fresh_alloc_struct_voidP result (Int.(-) n (1)) (old
        !voidP_alloc_table))
       /\
       ((fresh_tag_struct_voidP result (Int.(-) n (1)) (old
        !voidP_tag_table))
       /\
       ((typeof_struct_voidP result (0) n !voidP_tag_table) /\
       (container_of_struct_voidP result (0) n !voidP_tag_table))))))) }
  
  val allocate_singleton_struct_voidP
  (voidP_alloc_table : ref (alloc_table voidP)) 
   (voidP_tag_table : ref (tag_table voidP)) : (pointer voidP)
    requires { true } writes { voidP_alloc_table, voidP_tag_table }
    ensures {
      ((strict_valid_struct_voidP result (0) (0) !voidP_alloc_table) /\
      ((frame_alloc_struct_voidP result (1) (old !voidP_alloc_table)
       !voidP_alloc_table)
      /\
      ((frame_tag_struct_voidP result (old !voidP_tag_table)
       !voidP_tag_table)
      /\
      ((fresh_alloc_struct_voidP result (0) (old !voidP_alloc_table)) /\
      ((fresh_tag_struct_voidP result (0) (old !voidP_tag_table)) /\
      ((typeof_singleton_struct_voidP result !voidP_tag_table) /\
      (container_of_singleton_struct_voidP result !voidP_tag_table))))))) }
  
end

module Exceptions

  use why3.Bool.Bool 
  
  exception Loop_continue_exc unit
  
  exception Loop_exit_exc unit
  
  exception Return_label_exc unit
  
end

module Safe_bit_uint64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint64_of_Bit_uint8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint8.to_int n)) \/
     (Bit_int8_of_Bit_uint8.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint8 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { (Int8.in_bounds (Uint8.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint8

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Uint8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Uint64.to_int n)) \/
     (Bit_uint32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint32_of_Bit_uint64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { (Uint32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint64.to_int n)) \/
     (Bit_uint16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint64.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint64.to_int n)) \/
     (Bit_int8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { (Int8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires {
     ((Bit_int64.in_bounds (Uint64.to_int n)) \/
     (Bit_int64_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint64 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { (Int64.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint64.to_int n)) \/
     (Bit_int32_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { (Int32.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint64.to_int n)) \/
     (Bit_int16_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { (Int16.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint64

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Uint32.to_int n)) \/
     (Bit_uint16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint16_of_Bit_uint32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { (Uint16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint32.to_int n)) \/
     (Bit_int8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { (Int8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Uint32.to_int n)) \/
     (Bit_int32_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint32 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { (Int32.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint32.to_int n)) \/
     (Bit_int16_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { (Int16.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint32

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Uint16.to_int n)) \/
     (Bit_int8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_int8_of_Bit_uint16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { (Int8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_uint16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int64.t
   requires { true }
   ensures { ((=) (Int64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_uint16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int32.t
   requires { true }
   ensures { ((=) (Int32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Uint16.to_int n)) \/
     (Bit_int16_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_uint16 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { (Int16.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_uint16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Int16.t
   requires { true }
   ensures { ((=) (Int16.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int64_of_Bit_int8 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int8 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int8 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int8

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires {
     ((Bit_int32.in_bounds (Int64.to_int n)) \/
     (Bit_int32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int32_of_Bit_int64 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { (Int32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int64.to_int n)) \/
     (Bit_int16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int64 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { (Int16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int64

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int16_of_Safe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires {
     ((Bit_int16.in_bounds (Int32.to_int n)) \/
     (Bit_int16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int16_of_Unsafe_bit_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int16_of_Bit_int32 
  
  use enum.Bit_int16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Bit_int16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true }
   ensures {
     (((=) (Int16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int16_of_Safe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { (Int16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int16_of_Unsafe_int32

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int16.t
   requires { true } ensures { ((=) (Int16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint64.to_int n)) \/
     (Bit_uint8_of_Bit_uint64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use Bit_uint8_of_Bit_uint64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint64

  use enum.Uint8 
  
  use enum.Uint64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint64.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint32.to_int n)) \/
     (Bit_uint8_of_Bit_uint32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use Bit_uint8_of_Bit_uint32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint32

  use enum.Uint8 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Uint16.to_int n)) \/
     (Bit_uint8_of_Bit_uint16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use Bit_uint8_of_Bit_uint16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Uint16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { (Uint8.in_bounds (Uint16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_uint16

  use enum.Uint8 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint8.t
   requires { true }
   ensures { ((=) (Uint8.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int8.to_int n)) \/
     (Bit_uint8_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use Bit_uint8_of_Bit_int8 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { (Uint8.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int8

  use enum.Uint8 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int64.to_int n)) \/
     (Bit_uint8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use Bit_uint8_of_Bit_int64 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { (Uint8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int64

  use enum.Uint8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int32.to_int n)) \/
     (Bit_uint8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use Bit_uint8_of_Bit_int32 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { (Uint8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int32

  use enum.Uint8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint8_of_Safe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires {
     ((Bit_uint8.in_bounds (Int16.to_int n)) \/
     (Bit_uint8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint8_of_Unsafe_bit_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use Bit_uint8_of_Bit_int16 
  
  use enum.Bit_uint8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Bit_uint8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true }
   ensures {
     (((=) (Uint8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint8_of_Safe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { (Uint8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint8_of_Unsafe_int16

  use enum.Uint8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint8.t
   requires { true } ensures { ((=) (Uint8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use Bit_uint64_of_Bit_uint32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint32.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint32

  use enum.Uint64 
  
  use enum.Uint32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use Bit_uint64_of_Bit_uint16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_uint16

  use enum.Uint64 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int8.to_int n)) \/
     (Bit_uint64_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use Bit_uint64_of_Bit_int8 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { (Uint64.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int8

  use enum.Uint64 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint64.t
   requires { true } ensures { ((=) (Uint64.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int64.to_int n)) \/
     (Bit_uint64_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use Bit_uint64_of_Bit_int64 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { (Uint64.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int64

  use enum.Uint64 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int32.to_int n)) \/
     (Bit_uint64_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use Bit_uint64_of_Bit_int32 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { (Uint64.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int32

  use enum.Uint64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint64_of_Safe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires {
     ((Bit_uint64.in_bounds (Int16.to_int n)) \/
     (Bit_uint64_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint64_of_Unsafe_bit_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use Bit_uint64_of_Bit_int16 
  
  use enum.Bit_uint64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Bit_uint64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures {
     (((=) (Uint64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint64_of_Safe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { (Uint64.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint64_of_Unsafe_int16

  use enum.Uint64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint64.t
   requires { true }
   ensures { ((=) (Uint64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use Bit_uint32_of_Bit_uint16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Uint16.to_int n)))
     /\ ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Uint16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_uint16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_uint16

  use enum.Uint32 
  
  use enum.Uint16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Uint16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Uint16.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int8.to_int n)) \/
     (Bit_uint32_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use Bit_uint32_of_Bit_int8 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { (Uint32.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int8

  use enum.Uint32 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint32.t
   requires { true } ensures { ((=) (Uint32.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int64.to_int n)) \/
     (Bit_uint32_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use Bit_uint32_of_Bit_int64 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { (Uint32.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int64

  use enum.Uint32 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int32.to_int n)) \/
     (Bit_uint32_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use Bit_uint32_of_Bit_int32 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { (Uint32.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int32

  use enum.Uint32 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint32_of_Safe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires {
     ((Bit_uint32.in_bounds (Int16.to_int n)) \/
     (Bit_uint32_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint32_of_Unsafe_bit_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use Bit_uint32_of_Bit_int16 
  
  use enum.Bit_uint32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Bit_uint32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures {
     (((=) (Uint32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint32_of_Safe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { (Uint32.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint32_of_Unsafe_int16

  use enum.Uint32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint32.t
   requires { true }
   ensures { ((=) (Uint32.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int8.to_int n)) \/
     (Bit_uint16_of_Bit_int8.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use Bit_uint16_of_Bit_int8 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int8.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int8.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int8.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { (Uint16.in_bounds (Int8.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int8

  use enum.Uint16 
  
  use enum.Int8 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int8.t) : Uint16.t
   requires { true } ensures { ((=) (Uint16.to_int result) (Int8.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int64.to_int n)) \/
     (Bit_uint16_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use Bit_uint16_of_Bit_int64 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int64.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { (Uint16.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int64

  use enum.Uint16 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int32.to_int n)) \/
     (Bit_uint16_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use Bit_uint16_of_Bit_int32 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int32.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { (Uint16.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int32

  use enum.Uint16 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_uint16_of_Safe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires {
     ((Bit_uint16.in_bounds (Int16.to_int n)) \/
     (Bit_uint16_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_uint16_of_Unsafe_bit_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use Bit_uint16_of_Bit_int16 
  
  use enum.Bit_uint16 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Bit_uint16.normalize (Int16.to_int n))) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures {
     (((=) (Uint16.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_uint16_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_uint16_of_Safe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { (Uint16.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_uint16_of_Unsafe_int16

  use enum.Uint16 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Uint16.t
   requires { true }
   ensures { ((=) (Uint16.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int64.to_int n)) \/
     (Bit_int8_of_Bit_int64.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use Bit_int8_of_Bit_int64 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int64.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int64.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int64.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { (Int8.in_bounds (Int64.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int64

  use enum.Int8 
  
  use enum.Int64 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int64.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int64.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int32.to_int n)) \/
     (Bit_int8_of_Bit_int32.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use Bit_int8_of_Bit_int32 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { (Int8.in_bounds (Int32.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int32

  use enum.Int8 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int8_of_Safe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires {
     ((Bit_int8.in_bounds (Int16.to_int n)) \/
     (Bit_int8_of_Bit_int16.is_safe n)) }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int8_of_Unsafe_bit_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use Bit_int8_of_Bit_int16 
  
  use enum.Bit_int8 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Bit_int8.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true }
   ensures {
     (((=) (Int8.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int8_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int8_of_Safe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { (Int8.in_bounds (Int16.to_int n)) }
   ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int8_of_Unsafe_int16

  use enum.Int8 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int8.t
   requires { true } ensures { ((=) (Int8.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use Bit_int64_of_Bit_int32 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int32.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int32.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int32.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int32

  use enum.Int64 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int32.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int32.to_int n)) }
  
end

module Safe_bit_int64_of_Safe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int64_of_Unsafe_bit_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use Bit_int64_of_Bit_int16 
  
  use enum.Bit_int64 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Bit_int64.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true }
   ensures {
     (((=) (Int64.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int64_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int64_of_Safe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int64_of_Unsafe_int16

  use enum.Int64 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int64.t
   requires { true } ensures { ((=) (Int64.to_int result) (Int16.to_int n)) }
  
end

module Safe_bit_int32_of_Safe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Unsafe_bit_int32_of_Unsafe_bit_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use Bit_int32_of_Bit_int16 
  
  use enum.Bit_int32 
  
  use why3.Bool.Bool 
  
  val cast_modulo
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Bit_int32.normalize (Int16.to_int n))) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true }
   ensures {
     (((=) (Int32.to_int result) (Int16.to_int n)) /\
     ((=) result (Bit_int32_of_Bit_int16.cast_modulo n))) }
  
end

module Safe_int32_of_Safe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

module Unsafe_int32_of_Unsafe_int16

  use enum.Int32 
  
  use enum.Int16 
  
  use why3.Bool.Bool 
  
  val cast
  (n : Int16.t) : Int32.t
   requires { true } ensures { ((=) (Int32.to_int result) (Int16.to_int n)) }
  
end

theory Logic_is_valid_map_mem

  use import core.Voidp 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Map_5 
  
  use import Root___anonstruct_Key_2 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate is_valid_map_mem (map : (pointer __anonstruct_Map_5))
  (voidP_items_8_alloc_table_at_L : (alloc_table voidP))
  (__anonstruct_Value_3_items_8_alloc_table_at_L : (alloc_table
  __anonstruct_Value_3)) (__anonstruct_Map_5_map_2_alloc_table_at_L :
  (alloc_table __anonstruct_Map_5))
  (__anonstruct_Key_2_items_8_alloc_table_at_L : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Map_5_capacity_map_2_at_L : (memory
  __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_items_map_2_at_L : (memory
  __anonstruct_Map_5 (pointer voidP)))
  (__anonstruct_Item_4_value_items_8_at_L : (memory voidP (pointer
  __anonstruct_Value_3))) (__anonstruct_Item_4_key_items_8_at_L : (memory
  voidP (pointer __anonstruct_Key_2)))
  =
     ((((<=) (offset_min __anonstruct_Map_5_map_2_alloc_table_at_L map) (0))
      /\
      (((>=) (offset_max __anonstruct_Map_5_map_2_alloc_table_at_L map) (0))
      /\ ((=) true true)))
     /\
     (if
      ((<=) (0)
      (Int.(-)
      (Int32.to_int (select __anonstruct_Map_5_capacity_map_2_at_L map)) (1)))
      then
      (((<=)
       (offset_min voidP_items_8_alloc_table_at_L
       (select __anonstruct_Map_5_items_map_2_at_L map)) (0))
      /\
      (((>=)
       (offset_max voidP_items_8_alloc_table_at_L
       (select __anonstruct_Map_5_items_map_2_at_L map))
       (Int.(-)
       (Int32.to_int (select __anonstruct_Map_5_capacity_map_2_at_L map))
       (1)))
      /\
      (forall __framac_tmp1 : int.
       ((((<=) (0) __framac_tmp1) /\
        ((<=) __framac_tmp1
        (Int.(-)
        (Int32.to_int (select __anonstruct_Map_5_capacity_map_2_at_L map))
        (1)))) ->
        (((<=)
         (offset_min __anonstruct_Key_2_items_8_alloc_table_at_L
         (select __anonstruct_Item_4_key_items_8_at_L
         (shift (select __anonstruct_Map_5_items_map_2_at_L map)
         __framac_tmp1))) (0))
        /\
        (((>=)
         (offset_max __anonstruct_Key_2_items_8_alloc_table_at_L
         (select __anonstruct_Item_4_key_items_8_at_L
         (shift (select __anonstruct_Map_5_items_map_2_at_L map)
         __framac_tmp1))) (0))
        /\
        (((=) true true) /\
        (((<=)
         (offset_min __anonstruct_Value_3_items_8_alloc_table_at_L
         (select __anonstruct_Item_4_value_items_8_at_L
         (shift (select __anonstruct_Map_5_items_map_2_at_L map)
         __framac_tmp1))) (0))
        /\
        (((>=)
         (offset_max __anonstruct_Value_3_items_8_alloc_table_at_L
         (select __anonstruct_Item_4_value_items_8_at_L
         (shift (select __anonstruct_Map_5_items_map_2_at_L map)
         __framac_tmp1))) (0))
        /\ ((=) true true)))))))))) else ((=) true true)))
  
  
end

theory Logic_is_valid_map_sizes

  use import Root___anonstruct_Map_5 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use why3.Bool.Bool 
  
  predicate is_valid_map_sizes (map_0 : (pointer __anonstruct_Map_5))
  (__anonstruct_Map_5_count_map_0_3_at_L : (memory __anonstruct_Map_5
  Int32.t)) (__anonstruct_Map_5_capacity_map_0_3_at_L : (memory
  __anonstruct_Map_5 Int32.t))
  =
     ((Int32.(<=) (#"map_h.jc" 68 9 21# "expl:Integer cast" (Int32.of_int
      (0))) (select __anonstruct_Map_5_count_map_0_3_at_L map_0))
     /\
     ((Int32.(<=) (select __anonstruct_Map_5_count_map_0_3_at_L map_0)
      (#"map_h.jc" 69 25 46# "expl:Integer cast" (Int32.of_int
      (2147483647))))
     /\
     ((Int32.(<=) (#"map_h.jc" 70 9 21# "expl:Integer cast" (Int32.of_int
      (0))) (select __anonstruct_Map_5_capacity_map_0_3_at_L map_0))
     /\
     ((Int32.(<=) (select __anonstruct_Map_5_capacity_map_0_3_at_L map_0)
      (#"map_h.jc" 71 26 47# "expl:Integer cast" (Int32.of_int
      (2147483647))))
     /\
     (Int32.(>=) (select __anonstruct_Map_5_capacity_map_0_3_at_L map_0)
     (select __anonstruct_Map_5_count_map_0_3_at_L map_0))))))
  
  
end

theory Logic_is_valid_item

  use import core.Voidp 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Map_5 
  
  use import Root___anonstruct_Key_2 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_map_sizes 
  
  use import Logic_is_valid_map_mem 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate is_valid_item (map_1 : (pointer __anonstruct_Map_5)) (idx : int)
  (voidP_items_9_alloc_table_at_L : (alloc_table voidP))
  (__anonstruct_Value_3_items_9_alloc_table_at_L : (alloc_table
  __anonstruct_Value_3)) (__anonstruct_Map_5_map_1_4_alloc_table_at_L :
  (alloc_table __anonstruct_Map_5))
  (__anonstruct_Key_2_items_9_alloc_table_at_L : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Map_5_count_map_1_4_at_L : (memory
  __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_capacity_map_1_4_at_L :
  (memory __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_items_map_1_4_at_L
  : (memory __anonstruct_Map_5 (pointer voidP)))
  (__anonstruct_Item_4_existent_items_9_at_L : (memory voidP Int32.t))
  (__anonstruct_Item_4_value_items_9_at_L : (memory voidP (pointer
  __anonstruct_Value_3))) (__anonstruct_Item_4_key_items_9_at_L : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Value_3_d_items_9_at_L :
  (memory __anonstruct_Value_3 Int32.t)) (__anonstruct_Value_3_c_items_9_at_L
  : (memory __anonstruct_Value_3 Int32.t)) (__anonstruct_Key_2_b_items_9_at_L
  : (memory __anonstruct_Key_2 Int32.t)) (__anonstruct_Key_2_a_items_9_at_L :
  (memory __anonstruct_Key_2 Int32.t))
  =
     (((is_valid_map_mem map_1 voidP_items_9_alloc_table_at_L
       __anonstruct_Value_3_items_9_alloc_table_at_L
       __anonstruct_Map_5_map_1_4_alloc_table_at_L
       __anonstruct_Key_2_items_9_alloc_table_at_L
       __anonstruct_Map_5_capacity_map_1_4_at_L
       __anonstruct_Map_5_items_map_1_4_at_L
       __anonstruct_Item_4_value_items_9_at_L
       __anonstruct_Item_4_key_items_9_at_L)
      /\
      ((is_valid_map_sizes map_1 __anonstruct_Map_5_count_map_1_4_at_L
       __anonstruct_Map_5_capacity_map_1_4_at_L)
      /\
      (((<=) (0) idx) /\
      ((<) idx
      (Int32.to_int (select __anonstruct_Map_5_capacity_map_1_4_at_L map_1))))))
      ->
      ((Int32.(=) (#"map_h.jc" 78 8 20# "expl:Integer cast" (Int32.of_int
       (0)))
       (select __anonstruct_Item_4_existent_items_9_at_L
       (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))
      \/
      ((Int32.(=) (#"map_h.jc" 79 10 22# "expl:Integer cast" (Int32.of_int
       (1)))
       (select __anonstruct_Item_4_existent_items_9_at_L
       (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx))) ->
       (((<=) (Int.(-) (Int.(-_) (2147483647)) (1))
        (Int32.to_int
        (select __anonstruct_Key_2_a_items_9_at_L
        (select __anonstruct_Item_4_key_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))))
       /\
       ((Int32.(<=)
        (select __anonstruct_Key_2_a_items_9_at_L
        (select __anonstruct_Item_4_key_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))
        (#"map_h.jc" 82 48 69# "expl:Integer cast" (Int32.of_int
        (2147483647))))
       /\
       (((<=) (Int.(-) (Int.(-_) (2147483647)) (1))
        (Int32.to_int
        (select __anonstruct_Key_2_b_items_9_at_L
        (select __anonstruct_Item_4_key_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))))
       /\
       ((Int32.(<=)
        (select __anonstruct_Key_2_b_items_9_at_L
        (select __anonstruct_Item_4_key_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))
        (#"map_h.jc" 85 46 67# "expl:Integer cast" (Int32.of_int
        (2147483647))))
       /\
       (((<=) (Int.(-) (Int.(-_) (2147483647)) (1))
        (Int32.to_int
        (select __anonstruct_Value_3_c_items_9_at_L
        (select __anonstruct_Item_4_value_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))))
       /\
       ((Int32.(<=)
        (select __anonstruct_Value_3_c_items_9_at_L
        (select __anonstruct_Item_4_value_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))
        (#"map_h.jc" 88 46 67# "expl:Integer cast" (Int32.of_int
        (2147483647))))
       /\
       (((<=) (Int.(-) (Int.(-_) (2147483647)) (1))
        (Int32.to_int
        (select __anonstruct_Value_3_d_items_9_at_L
        (select __anonstruct_Item_4_value_items_9_at_L
        (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))))
       /\
       (Int32.(<=)
       (select __anonstruct_Value_3_d_items_9_at_L
       (select __anonstruct_Item_4_value_items_9_at_L
       (shift (select __anonstruct_Map_5_items_map_1_4_at_L map_1) idx)))
       (#"map_h.jc" 91 44 65# "expl:Integer cast" (Int32.of_int
       (2147483647))))))))))))))
  
  
end

theory Logic_is_valid_items

  use import core.Voidp 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Map_5 
  
  use import Root___anonstruct_Key_2 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_item 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate is_valid_items (map_2 : (pointer __anonstruct_Map_5))
  (voidP_items_18_alloc_table_at_L : (alloc_table voidP))
  (__anonstruct_Value_3_items_18_alloc_table_at_L : (alloc_table
  __anonstruct_Value_3)) (__anonstruct_Map_5_map_2_5_alloc_table_at_L :
  (alloc_table __anonstruct_Map_5))
  (__anonstruct_Key_2_items_18_alloc_table_at_L : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Map_5_count_map_2_5_at_L : (memory
  __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_capacity_map_2_5_at_L :
  (memory __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_items_map_2_5_at_L
  : (memory __anonstruct_Map_5 (pointer voidP)))
  (__anonstruct_Item_4_existent_items_18_at_L : (memory voidP Int32.t))
  (__anonstruct_Item_4_value_items_18_at_L : (memory voidP (pointer
  __anonstruct_Value_3))) (__anonstruct_Item_4_key_items_18_at_L : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Value_3_d_items_18_at_L
  : (memory __anonstruct_Value_3 Int32.t))
  (__anonstruct_Value_3_c_items_18_at_L : (memory __anonstruct_Value_3
  Int32.t)) (__anonstruct_Key_2_b_items_18_at_L : (memory __anonstruct_Key_2
  Int32.t)) (__anonstruct_Key_2_a_items_18_at_L : (memory __anonstruct_Key_2
  Int32.t))
  =
     (forall i : int.
      ((((<=) (0) i) /\
       ((<) i
       (Int32.to_int (select __anonstruct_Map_5_capacity_map_2_5_at_L map_2))))
       ->
       (is_valid_item map_2 i voidP_items_18_alloc_table_at_L
       __anonstruct_Value_3_items_18_alloc_table_at_L
       __anonstruct_Map_5_map_2_5_alloc_table_at_L
       __anonstruct_Key_2_items_18_alloc_table_at_L
       __anonstruct_Map_5_count_map_2_5_at_L
       __anonstruct_Map_5_capacity_map_2_5_at_L
       __anonstruct_Map_5_items_map_2_5_at_L
       __anonstruct_Item_4_existent_items_18_at_L
       __anonstruct_Item_4_value_items_18_at_L
       __anonstruct_Item_4_key_items_18_at_L
       __anonstruct_Value_3_d_items_18_at_L
       __anonstruct_Value_3_c_items_18_at_L
       __anonstruct_Key_2_b_items_18_at_L __anonstruct_Key_2_a_items_18_at_L)))
  
  
end

theory Logic_is_valid_map

  use import core.Voidp 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Map_5 
  
  use import Root___anonstruct_Key_2 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_map_sizes 
  
  use import Logic_is_valid_map_mem 
  
  use import Logic_is_valid_items 
  
  use enum.Int32 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  predicate is_valid_map (map_3 : (pointer __anonstruct_Map_5))
  (voidP_items_22_alloc_table_at_L : (alloc_table voidP))
  (__anonstruct_Value_3_items_22_alloc_table_at_L : (alloc_table
  __anonstruct_Value_3)) (__anonstruct_Map_5_map_3_6_alloc_table_at_L :
  (alloc_table __anonstruct_Map_5))
  (__anonstruct_Key_2_items_22_alloc_table_at_L : (alloc_table
  __anonstruct_Key_2)) (__anonstruct_Map_5_count_map_3_6_at_L : (memory
  __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_capacity_map_3_6_at_L :
  (memory __anonstruct_Map_5 Int32.t)) (__anonstruct_Map_5_items_map_3_6_at_L
  : (memory __anonstruct_Map_5 (pointer voidP)))
  (__anonstruct_Item_4_existent_items_22_at_L : (memory voidP Int32.t))
  (__anonstruct_Item_4_value_items_22_at_L : (memory voidP (pointer
  __anonstruct_Value_3))) (__anonstruct_Item_4_key_items_22_at_L : (memory
  voidP (pointer __anonstruct_Key_2))) (__anonstruct_Value_3_d_items_22_at_L
  : (memory __anonstruct_Value_3 Int32.t))
  (__anonstruct_Value_3_c_items_22_at_L : (memory __anonstruct_Value_3
  Int32.t)) (__anonstruct_Key_2_b_items_22_at_L : (memory __anonstruct_Key_2
  Int32.t)) (__anonstruct_Key_2_a_items_22_at_L : (memory __anonstruct_Key_2
  Int32.t))
  =
     ((is_valid_map_mem map_3 voidP_items_22_alloc_table_at_L
      __anonstruct_Value_3_items_22_alloc_table_at_L
      __anonstruct_Map_5_map_3_6_alloc_table_at_L
      __anonstruct_Key_2_items_22_alloc_table_at_L
      __anonstruct_Map_5_capacity_map_3_6_at_L
      __anonstruct_Map_5_items_map_3_6_at_L
      __anonstruct_Item_4_value_items_22_at_L
      __anonstruct_Item_4_key_items_22_at_L)
     /\
     ((is_valid_map_sizes map_3 __anonstruct_Map_5_count_map_3_6_at_L
      __anonstruct_Map_5_capacity_map_3_6_at_L)
     /\
     (is_valid_items map_3 voidP_items_22_alloc_table_at_L
     __anonstruct_Value_3_items_22_alloc_table_at_L
     __anonstruct_Map_5_map_3_6_alloc_table_at_L
     __anonstruct_Key_2_items_22_alloc_table_at_L
     __anonstruct_Map_5_count_map_3_6_at_L
     __anonstruct_Map_5_capacity_map_3_6_at_L
     __anonstruct_Map_5_items_map_3_6_at_L
     __anonstruct_Item_4_existent_items_22_at_L
     __anonstruct_Item_4_value_items_22_at_L
     __anonstruct_Item_4_key_items_22_at_L
     __anonstruct_Value_3_d_items_22_at_L
     __anonstruct_Value_3_c_items_22_at_L __anonstruct_Key_2_b_items_22_at_L
     __anonstruct_Key_2_a_items_22_at_L)))
  
  
end

module Function_finalizeMap

  use import core.Voidp 
  
  use import core.Same_except 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Map_5 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pset_range 
  
  use import core.Pset_deref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val finalizeMap
  (map_4 : (pointer __anonstruct_Map_5)) 
   (__anonstruct_Map_5_map_7_alloc_table : ref (alloc_table
    __anonstruct_Map_5)) 
    (__anonstruct_Map_5_items_map_7 : ref (memory __anonstruct_Map_5 (pointer
     voidP))) 
     (__anonstruct_Item_4_existent_items_10 : ref (memory voidP Int32.t)) 
      (__anonstruct_Value_3_d_items_10 : ref (memory __anonstruct_Value_3
       Int32.t)) 
       (__anonstruct_Value_3_c_items_10 : ref (memory __anonstruct_Value_3
        Int32.t)) 
        (__anonstruct_Key_2_b_items_10 : ref (memory __anonstruct_Key_2
         Int32.t)) 
         (__anonstruct_Key_2_a_items_10 : ref (memory __anonstruct_Key_2
          Int32.t)) 
          (voidP_items_10_alloc_table : (alloc_table voidP)) 
           (__anonstruct_Value_3_items_10_alloc_table : (alloc_table
            __anonstruct_Value_3)) 
            (__anonstruct_Key_2_items_10_alloc_table : (alloc_table
             __anonstruct_Key_2)) 
             (__anonstruct_Map_5_count_map_7 : (memory __anonstruct_Map_5
              Int32.t)) 
              (__anonstruct_Map_5_capacity_map_7 : (memory __anonstruct_Map_5
               Int32.t)) 
               (__anonstruct_Item_4_value_items_10 : (memory voidP (pointer
                __anonstruct_Value_3))) 
                (__anonstruct_Item_4_key_items_10 : (memory voidP (pointer
                 __anonstruct_Key_2))) : unit
                 requires { true } reads {
                 __anonstruct_Item_4_existent_items_10,
                 __anonstruct_Key_2_a_items_10,
                 __anonstruct_Key_2_b_items_10,
                 __anonstruct_Map_5_items_map_7,
                 __anonstruct_Map_5_map_7_alloc_table,
                 __anonstruct_Value_3_c_items_10,
                 __anonstruct_Value_3_d_items_10 } writes {
                 __anonstruct_Item_4_existent_items_10,
                 __anonstruct_Key_2_a_items_10,
                 __anonstruct_Key_2_b_items_10,
                 __anonstruct_Map_5_items_map_7,
                 __anonstruct_Map_5_map_7_alloc_table,
                 __anonstruct_Value_3_c_items_10,
                 __anonstruct_Value_3_d_items_10 }
                 ensures {
                   ((#"map_h.jc" 112 12 30# "expl:Allocates clause"
                    (#"map_h.jc" 112 12 30# "expl:Allocates clause"
                    (alloc_same_except (old
                    !__anonstruct_Map_5_map_7_alloc_table)
                    !__anonstruct_Map_5_map_7_alloc_table pset_empty)))
                   /\
                   (((((((#"map_h.jc" 106 10 326# "expl:Assigns clause"
                         (not_assigns __anonstruct_Key_2_items_10_alloc_table
                         __anonstruct_Key_2_items_10_alloc_table (old
                         !__anonstruct_Key_2_a_items_10)
                         !__anonstruct_Key_2_a_items_10
                         (pset_deref __anonstruct_Item_4_key_items_10
                         (pset_range
                         (pset_deref (old !__anonstruct_Map_5_items_map_7)
                         (pset_singleton map_4)) (0)
                         (Int.(-)
                         (Int32.to_int
                         (select __anonstruct_Map_5_capacity_map_7 map_4))
                         (1))))))
                        /\
                        (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                        (not_assigns __anonstruct_Key_2_items_10_alloc_table
                        __anonstruct_Key_2_items_10_alloc_table (old
                        !__anonstruct_Key_2_b_items_10)
                        !__anonstruct_Key_2_b_items_10
                        (pset_deref __anonstruct_Item_4_key_items_10
                        (pset_range
                        (pset_deref (old !__anonstruct_Map_5_items_map_7)
                        (pset_singleton map_4)) (0)
                        (Int.(-)
                        (Int32.to_int
                        (select __anonstruct_Map_5_capacity_map_7 map_4))
                        (1)))))))
                       /\
                       (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                       (not_assigns __anonstruct_Value_3_items_10_alloc_table
                       __anonstruct_Value_3_items_10_alloc_table (old
                       !__anonstruct_Value_3_c_items_10)
                       !__anonstruct_Value_3_c_items_10
                       (pset_deref __anonstruct_Item_4_value_items_10
                       (pset_range
                       (pset_deref (old !__anonstruct_Map_5_items_map_7)
                       (pset_singleton map_4)) (0)
                       (Int.(-)
                       (Int32.to_int
                       (select __anonstruct_Map_5_capacity_map_7 map_4)) (1)))))))
                      /\
                      (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                      (not_assigns __anonstruct_Value_3_items_10_alloc_table
                      __anonstruct_Value_3_items_10_alloc_table (old
                      !__anonstruct_Value_3_d_items_10)
                      !__anonstruct_Value_3_d_items_10
                      (pset_deref __anonstruct_Item_4_value_items_10
                      (pset_range
                      (pset_deref (old !__anonstruct_Map_5_items_map_7)
                      (pset_singleton map_4)) (0)
                      (Int.(-)
                      (Int32.to_int
                      (select __anonstruct_Map_5_capacity_map_7 map_4)) (1)))))))
                     /\
                     (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                     (not_assigns voidP_items_10_alloc_table
                     voidP_items_10_alloc_table (old
                     !__anonstruct_Item_4_existent_items_10)
                     !__anonstruct_Item_4_existent_items_10
                     (pset_range
                     (pset_deref (old !__anonstruct_Map_5_items_map_7)
                     (pset_singleton map_4)) (0)
                     (Int.(-)
                     (Int32.to_int
                     (select __anonstruct_Map_5_capacity_map_7 map_4)) (1))))))
                    /\
                    (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                    (not_assigns (old !__anonstruct_Map_5_map_7_alloc_table)
                    !__anonstruct_Map_5_map_7_alloc_table (old
                    !__anonstruct_Map_5_items_map_7)
                    !__anonstruct_Map_5_items_map_7 (pset_singleton map_4))))
                   /\
                   (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                   "expl:Ensures clause"
                   (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                   "expl:Ensures clause"
                   ((#"/home/ubse/why3/why-verify/task4/map.h" 65 12 23#
                    "expl:Ensures clause"
                    (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                    "expl:Ensures clause"
                    ((#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                     "expl:Ensures clause"
                     ((<=)
                     (offset_min !__anonstruct_Map_5_map_7_alloc_table map_4)
                     (0)))
                    /\
                    (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                    "expl:Ensures clause"
                    ((#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                     "expl:Ensures clause"
                     ((>=)
                     (offset_max !__anonstruct_Map_5_map_7_alloc_table map_4)
                     (0)))
                    /\
                    (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                    "expl:Ensures clause" ((=) true true)))))))
                   /\
                   (#"/home/ubse/why3/why-verify/task4/map.h" 65 28 53#
                   "expl:Ensures clause"
                   ((=) (select !__anonstruct_Map_5_items_map_7 map_4) null)))))))
                   }
  
end

module Function_finalizeMap_safe

  use import core.Voidp 
  
  use import Struct___anonstruct_Item_4 
  
  use import core.Same_except 
  
  use import Root___anonstruct_Value_3 
  
  use import Root___anonstruct_Map_5 
  
  use import Root___anonstruct_Key_2 
  
  use import ref.Ref 
  
  use import core.Pset_range 
  
  use import core.Pset_deref 
  
  use import core.Pset 
  
  use import core.Pointer 
  
  use import core.Memory 
  
  use import Logic_is_valid_map 
  
  use enum.Int32 
  
  use import int.Int 
  
  use import core.Assigns 
  
  use import core.Alloc_table 
  
  use why3.Bool.Bool 
  
  val finalizeMap
  (map_4 : (pointer __anonstruct_Map_5)) 
   (__anonstruct_Map_5_map_7_alloc_table : ref (alloc_table
    __anonstruct_Map_5)) 
    (__anonstruct_Map_5_items_map_7 : ref (memory __anonstruct_Map_5 (pointer
     voidP))) 
     (__anonstruct_Item_4_existent_items_10 : ref (memory voidP Int32.t)) 
      (__anonstruct_Value_3_d_items_10 : ref (memory __anonstruct_Value_3
       Int32.t)) 
       (__anonstruct_Value_3_c_items_10 : ref (memory __anonstruct_Value_3
        Int32.t)) 
        (__anonstruct_Key_2_b_items_10 : ref (memory __anonstruct_Key_2
         Int32.t)) 
         (__anonstruct_Key_2_a_items_10 : ref (memory __anonstruct_Key_2
          Int32.t)) 
          (voidP_items_10_alloc_table : (alloc_table voidP)) 
           (__anonstruct_Value_3_items_10_alloc_table : (alloc_table
            __anonstruct_Value_3)) 
            (__anonstruct_Key_2_items_10_alloc_table : (alloc_table
             __anonstruct_Key_2)) 
             (__anonstruct_Map_5_count_map_7 : (memory __anonstruct_Map_5
              Int32.t)) 
              (__anonstruct_Map_5_capacity_map_7 : (memory __anonstruct_Map_5
               Int32.t)) 
               (__anonstruct_Item_4_value_items_10 : (memory voidP (pointer
                __anonstruct_Value_3))) 
                (__anonstruct_Item_4_key_items_10 : (memory voidP (pointer
                 __anonstruct_Key_2))) : unit
                 requires {
                   ("expl:External"
                   (#"map_h.jc" 103 12 96# "expl:Requires clause"
                   ((#"/home/ubse/why3/why-verify/task4/map.h" 55 13 30#
                    "expl:Requires clause"
                    (is_valid_map map_4 voidP_items_10_alloc_table
                    __anonstruct_Value_3_items_10_alloc_table
                    !__anonstruct_Map_5_map_7_alloc_table
                    __anonstruct_Key_2_items_10_alloc_table
                    __anonstruct_Map_5_count_map_7
                    __anonstruct_Map_5_capacity_map_7
                    !__anonstruct_Map_5_items_map_7
                    !__anonstruct_Item_4_existent_items_10
                    __anonstruct_Item_4_value_items_10
                    __anonstruct_Item_4_key_items_10
                    !__anonstruct_Value_3_d_items_10
                    !__anonstruct_Value_3_c_items_10
                    !__anonstruct_Key_2_b_items_10
                    !__anonstruct_Key_2_a_items_10))
                   /\
                   (#"/home/ubse/why3/why-verify/task4/map.h" 56 13 34#
                   "expl:Requires clause"
                   (#"map_h.jc" 103 12 96# "expl:Requires clause"
                   ((#"map_h.jc" 103 12 96# "expl:Requires clause"
                    (strict_left_valid_struct___anonstruct_Item_4
                    (select !__anonstruct_Map_5_items_map_7 map_4) (0)
                    __anonstruct_Key_2_items_10_alloc_table
                    __anonstruct_Value_3_items_10_alloc_table
                    voidP_items_10_alloc_table
                    __anonstruct_Item_4_key_items_10
                    __anonstruct_Item_4_value_items_10))
                   /\
                   (#"map_h.jc" 103 12 96# "expl:Requires clause"
                   (right_valid_struct___anonstruct_Item_4
                   (select !__anonstruct_Map_5_items_map_7 map_4)
                   (Int.(-_) 1) __anonstruct_Key_2_items_10_alloc_table
                   __anonstruct_Value_3_items_10_alloc_table
                   voidP_items_10_alloc_table
                   __anonstruct_Item_4_key_items_10
                   __anonstruct_Item_4_value_items_10)))))))) }
                 reads { __anonstruct_Item_4_existent_items_10,
                 __anonstruct_Key_2_a_items_10,
                 __anonstruct_Key_2_b_items_10,
                 __anonstruct_Map_5_items_map_7,
                 __anonstruct_Map_5_map_7_alloc_table,
                 __anonstruct_Value_3_c_items_10,
                 __anonstruct_Value_3_d_items_10 } writes {
                 __anonstruct_Item_4_existent_items_10,
                 __anonstruct_Key_2_a_items_10,
                 __anonstruct_Key_2_b_items_10,
                 __anonstruct_Map_5_items_map_7,
                 __anonstruct_Map_5_map_7_alloc_table,
                 __anonstruct_Value_3_c_items_10,
                 __anonstruct_Value_3_d_items_10 }
                 ensures {
                   ((#"map_h.jc" 112 12 30# "expl:Allocates clause"
                    (#"map_h.jc" 112 12 30# "expl:Allocates clause"
                    (alloc_same_except (old
                    !__anonstruct_Map_5_map_7_alloc_table)
                    !__anonstruct_Map_5_map_7_alloc_table pset_empty)))
                   /\
                   (((((((#"map_h.jc" 106 10 326# "expl:Assigns clause"
                         (not_assigns __anonstruct_Key_2_items_10_alloc_table
                         __anonstruct_Key_2_items_10_alloc_table (old
                         !__anonstruct_Key_2_a_items_10)
                         !__anonstruct_Key_2_a_items_10
                         (pset_deref __anonstruct_Item_4_key_items_10
                         (pset_range
                         (pset_deref (old !__anonstruct_Map_5_items_map_7)
                         (pset_singleton map_4)) (0)
                         (Int.(-)
                         (Int32.to_int
                         (select __anonstruct_Map_5_capacity_map_7 map_4))
                         (1))))))
                        /\
                        (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                        (not_assigns __anonstruct_Key_2_items_10_alloc_table
                        __anonstruct_Key_2_items_10_alloc_table (old
                        !__anonstruct_Key_2_b_items_10)
                        !__anonstruct_Key_2_b_items_10
                        (pset_deref __anonstruct_Item_4_key_items_10
                        (pset_range
                        (pset_deref (old !__anonstruct_Map_5_items_map_7)
                        (pset_singleton map_4)) (0)
                        (Int.(-)
                        (Int32.to_int
                        (select __anonstruct_Map_5_capacity_map_7 map_4))
                        (1)))))))
                       /\
                       (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                       (not_assigns __anonstruct_Value_3_items_10_alloc_table
                       __anonstruct_Value_3_items_10_alloc_table (old
                       !__anonstruct_Value_3_c_items_10)
                       !__anonstruct_Value_3_c_items_10
                       (pset_deref __anonstruct_Item_4_value_items_10
                       (pset_range
                       (pset_deref (old !__anonstruct_Map_5_items_map_7)
                       (pset_singleton map_4)) (0)
                       (Int.(-)
                       (Int32.to_int
                       (select __anonstruct_Map_5_capacity_map_7 map_4)) (1)))))))
                      /\
                      (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                      (not_assigns __anonstruct_Value_3_items_10_alloc_table
                      __anonstruct_Value_3_items_10_alloc_table (old
                      !__anonstruct_Value_3_d_items_10)
                      !__anonstruct_Value_3_d_items_10
                      (pset_deref __anonstruct_Item_4_value_items_10
                      (pset_range
                      (pset_deref (old !__anonstruct_Map_5_items_map_7)
                      (pset_singleton map_4)) (0)
                      (Int.(-)
                      (Int32.to_int
                      (select __anonstruct_Map_5_capacity_map_7 map_4)) (1)))))))
                     /\
                     (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                     (not_assigns voidP_items_10_alloc_table
                     voidP_items_10_alloc_table (old
                     !__anonstruct_Item_4_existent_items_10)
                     !__anonstruct_Item_4_existent_items_10
                     (pset_range
                     (pset_deref (old !__anonstruct_Map_5_items_map_7)
                     (pset_singleton map_4)) (0)
                     (Int.(-)
                     (Int32.to_int
                     (select __anonstruct_Map_5_capacity_map_7 map_4)) (1))))))
                    /\
                    (#"map_h.jc" 106 10 326# "expl:Assigns clause"
                    (not_assigns (old !__anonstruct_Map_5_map_7_alloc_table)
                    !__anonstruct_Map_5_map_7_alloc_table (old
                    !__anonstruct_Map_5_items_map_7)
                    !__anonstruct_Map_5_items_map_7 (pset_singleton map_4))))
                   /\
                   (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                   "expl:Ensures clause"
                   (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                   "expl:Ensures clause"
                   ((#"/home/ubse/why3/why-verify/task4/map.h" 65 12 23#
                    "expl:Ensures clause"
                    (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                    "expl:Ensures clause"
                    ((#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                     "expl:Ensures clause"
                     ((<=)
                     (offset_min !__anonstruct_Map_5_map_7_alloc_table map_4)
                     (0)))
                    /\
                    (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                    "expl:Ensures clause"
                    ((#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                     "expl:Ensures clause"
                     ((>=)
                     (offset_max !__anonstruct_Map_5_map_7_alloc_table map_4)
                     (0)))
                    /\
                    (#"/home/ubse/why3/why-verify/task4/map.h" 65 12 54#
                    "expl:Ensures clause" ((=) true true)))))))
                   /\
                   (#"/home/ubse/why3/why-verify/task4/map.h" 65 28 53#
                   "expl:Ensures clause"
                   ((=) (select !__anonstruct_Map_5_items_map_7 map_4) null)))))))
                   }
  
end
