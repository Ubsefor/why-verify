
axiomatic Padding {

  logic type padding
  
}

tag voidP = {
}

type voidP = [voidP]

tag charP = voidP with {
  int8 charM: 8;
}

tag __anonstruct_Key_2 = {
  int32 a: 32; 
  int32 b: 32;
}

type __anonstruct_Key_2 = [__anonstruct_Key_2]

tag __anonstruct_Value_3 = {
  int32 c: 32; 
  int32 d: 32;
}

type __anonstruct_Value_3 = [__anonstruct_Value_3]

tag __anonstruct_Item_4 = voidP with {
  __anonstruct_Key_2[0] key_2: 64; 
  __anonstruct_Value_3[0] value_2: 64; 
  int32 existent: 32;
}

tag __anonstruct_Map_5 = {
  __anonstruct_Item_4[..] items: 64; 
  int32 capacity: 32; 
  int32 count: 32;
}

type __anonstruct_Map_5 = [__anonstruct_Map_5]

axiomatic how_to_count {

  logic integer count{L}(__anonstruct_Map_5[..] map, integer m, integer n_1)
   
  logic integer count_exist{L}(__anonstruct_Map_5[..] map_0) =
  count{L}(map_0, 0, (map_0.capacity :> integer))
   
  axiom count_zero{L} :
  (_C_1 : (\forall __anonstruct_Map_5[..] map_1;
            (\forall integer m_0;
              (\forall integer n_2;
                ((m_0 >= n_2) ==> (count{L}(map_1, m_0, n_2) == 0))))))
   
  predicate count_one_p{L}(__anonstruct_Map_5[..] map_2, integer m_1) =
  (count{L}(map_2, m_1, (m_1 + 1)) ==
    (if (((map_2.items + m_1).existent :> integer) != 0) then 1 else 0))
   
  axiom count_one{L} :
  (_C_2 : (\forall __anonstruct_Map_5[..] map_3;
            (\forall integer m_2;
              count_one_p{L}(map_3, m_2))))
   
  predicate count_neg_p{L}(__anonstruct_Map_5[..] map_4, integer m_3) =
  (count{L}(map_4, (m_3 - 1), m_3) ==
    (if (((map_4.items + (m_3 - 1)).existent :> integer) != 0) then 1 else 0))
   
  axiom count_neg{L} :
  (_C_3 : (\forall __anonstruct_Map_5[..] map_5;
            (\forall integer m_4;
              (((1 <= m_4) && (m_4 <= (map_5.capacity :> integer))) ==>
                count_neg_p{L}(map_5, m_4)))))
   
  predicate count_self_p{L}(__anonstruct_Map_5[..] map_6, integer m_5) =
  (count{L}(map_6, m_5, m_5) ==
    (if (((map_6.items + m_5).existent :> integer) != 0) then 1 else 0))
   
  axiom count_self{L} :
  (_C_4 : (\forall __anonstruct_Map_5[..] map_7;
            (\forall integer m_6;
              (((0 <= m_6) && (m_6 < (map_7.capacity :> integer))) ==>
                count_self_p{L}(map_7, m_6)))))
   
  predicate count_split_p{L}(__anonstruct_Map_5[..] map_8, integer m_7,
                             integer n_3, integer k_1) =
  (count{L}(map_8, m_7, k_1) ==
    (count{L}(map_8, m_7, n_3) + count{L}(map_8, n_3, k_1)))
   
  axiom count_split{L} :
  (_C_5 : (\forall __anonstruct_Map_5[..] map_9;
            (\forall integer m_8;
              (\forall integer n_4;
                (\forall integer k_2;
                  (((m_8 <= n_4) && (n_4 <= k_2)) ==>
                    count_split_p{L}(map_9, m_8, n_4, k_2)))))))
   
  axiom count_amount{L} :
  (_C_6 : (\forall __anonstruct_Map_5[..] map_10;
            (count{L}(map_10, 0, (map_10.capacity :> integer)) ==
              (map_10.count :> integer))))
  
}

axiomatic how_to_count2 {

  lemma l_count_split{L} :
  (_C_7 : (\forall __anonstruct_Map_5[..] map_11;
            (\forall integer i;
              (((is_valid_map{L}(map_11) && (0 < i)) &&
                 (i < (map_11.capacity :> integer))) ==>
                (count{L}(map_11, 0, i) ==
                  (count{L}(map_11, 0, (i - 1)) +
                    count{L}(map_11, (i - 1), i)))))))
   
  lemma l_count_split2{L} :
  (_C_8 : (\forall __anonstruct_Map_5[..] map_12;
            (\forall integer i_0;
              (\forall integer j;
                ((((is_valid_map{L}(map_12) && (0 < i_0)) && (i_0 < j)) &&
                   (j < (map_12.capacity :> integer))) ==>
                  (count{L}(map_12, 0, j) ==
                    (count{L}(map_12, 0, i_0) + count{L}(map_12, i_0, j))))))))
   
  lemma l_count_one_p{L} :
  (_C_9 : (\forall __anonstruct_Map_5[..] map_13;
            (\forall integer i_1;
              (is_valid_map{L}(map_13) ==>
                (count_one_p{L}(map_13, i_1) &&
                  (count{L}(map_13, i_1, (i_1 + 1)) ==
                    (if (((map_13.items + i_1).existent :> integer) != 0) then 1 else 0)))))))
  
}

predicate item_exists{L}(__anonstruct_Item_4[..] it) =
(\at(it.existent,L) == (1 :> int32))

logic __anonstruct_Key_2[..] get_key{L}(__anonstruct_Item_4[..] it_0) =
\at(it_0.key_2,L)

logic __anonstruct_Value_3[..] get_value{L}(__anonstruct_Item_4[..] it_1) =
\at(it_1.value_2,L)

logic __anonstruct_Item_4[..] get_item{L}(__anonstruct_Map_5[..] map_14,
                                          integer idx) =
\at((map_14.items + idx),L)

predicate is_valid_map_mem{L}(__anonstruct_Map_5[..] map_15) =
\at((((\at((((\offset_min(\at(map_15,L)) <= \at(0,L)) &&
              (\offset_max(\at(map_15,L)) >= \at(0,L))) &&
             true),L) &&
        (\at(\offset_max(\at(map_15.items,L)),L) ==
          ((map_15.capacity :> integer) - 1))) &&
       (! \at((((\offset_min(\at(map_15.items,L)) <=
                  \at((map_15.capacity :> integer),L)) &&
                 (\offset_max(\at(map_15.items,L)) >=
                   \at((map_15.capacity :> integer),L))) &&
                (\forall integer __framac_tmp4;
                  (((\at((map_15.capacity :> integer),L) <= __framac_tmp4) &&
                     (__framac_tmp4 <= \at((map_15.capacity :> integer),L))) ==>
                    ((((\offset_min(\at((map_15.items + __framac_tmp4).key_2,L)) <=
                         \at(0,L)) &&
                        (\offset_max(\at((map_15.items + __framac_tmp4).key_2,L)) >=
                          \at(0,L))) &&
                       true) &&
                      (((\offset_min(\at((map_15.items + __framac_tmp4).value_2,L)) <=
                          \at(0,L)) &&
                         (\offset_max(\at((map_15.items + __framac_tmp4).value_2,L)) >=
                           \at(0,L))) &&
                        true))))),L))) &&
      \at((if (\at(0,L) <= \at(((map_15.capacity :> integer) - 1),L)) then 
          (((\offset_min(\at(map_15.items,L)) <= \at(0,L)) &&
             (\offset_max(\at(map_15.items,L)) >=
               \at(((map_15.capacity :> integer) - 1),L))) &&
            (\forall integer __framac_tmp1;
              (((\at(0,L) <= __framac_tmp1) &&
                 (__framac_tmp1 <= \at(((map_15.capacity :> integer) - 1),L))) ==>
                ((((\offset_min(\at((map_15.items + __framac_tmp1).key_2,L)) <=
                     \at(0,L)) &&
                    (\offset_max(\at((map_15.items + __framac_tmp1).key_2,L)) >=
                      \at(0,L))) &&
                   true) &&
                  (((\offset_min(\at((map_15.items + __framac_tmp1).value_2,L)) <=
                      \at(0,L)) &&
                     (\offset_max(\at((map_15.items + __framac_tmp1).value_2,L)) >=
                       \at(0,L))) &&
                    true))))) else true),L)),L)

predicate is_valid_map_sizes{L}(__anonstruct_Map_5[..] map_16) =
\at((((0 :> int32) <= map_16.count) && (map_16.count <= map_16.capacity)),L)

predicate valid_existence{L}(__anonstruct_Item_4[..] it_2) =
\at((((0 :> int32) <= it_2.existent) && (it_2.existent <= (1 :> int32))),L)

predicate begin_ok{L}(__anonstruct_Map_5[..] map_17) =
\at(((map_17.count > (0 :> int32)) ==>
      ((map_17.items + 0).existent == (1 :> int32))),L)

predicate is_valid_item{L}(__anonstruct_Map_5[..] map_18, integer idx_0) =
\at(((((0 <= idx_0) && (idx_0 <= (map_18.capacity :> integer))) &&
       ((0 :> int32) <= (map_18.items + idx_0).existent)) &&
      ((map_18.items + idx_0).existent <= (1 :> int32))),L)

predicate count_ok{L}(__anonstruct_Map_5[..] map_19) =
(count_exist{L}(map_19) == (\at(map_19.count,L) :> integer))

predicate gap_ok{L}(__anonstruct_Map_5[..] map_20) =
(\forall integer i_2;
  (\forall integer j_0;
    ((((((((i_2 + 1) < j_0) && (j_0 < (map_20.capacity :> integer))) &&
          (0 <= i_2)) &&
         (i_2 < ((map_20.capacity :> integer) - 1))) &&
        item_exists{L}(get_item{L}(map_20, i_2))) &&
       item_exists{L}(get_item{L}(map_20, (i_2 + 1)))) ==>
      item_exists{L}(get_item{L}(map_20, j_0)))))

predicate is_valid_items{L}(__anonstruct_Map_5[..] map_21) =
\at((\forall integer i_3;
      (((0 <= i_3) && (i_3 < (map_21.capacity :> integer))) ==>
        is_valid_item{L}(map_21, i_3))),L)

predicate equal_keys{L1, L2}(__anonstruct_Key_2[..] k1,
                             __anonstruct_Key_2[..] k2) =
((\at(k1.a,L1) == \at(k2.a,L2)) && (\at(k1.b,L1) == \at(k2.b,L2)))

predicate compare_values{L1, L2}(__anonstruct_Value_3[..] v1,
                                 __anonstruct_Value_3[..] v2) =
((\at(v1.c,L1) == \at(v2.c,L2)) && (\at(v1.d,L1) == \at(v2.d,L2)))

predicate equal_keys_now{L}(__anonstruct_Key_2[..] k1_0,
                            __anonstruct_Key_2[..] k2_0) =
equal_keys{L, L}(k1_0, k2_0)

predicate compare_values_now{L}(__anonstruct_Value_3[..] v1_0,
                                __anonstruct_Value_3[..] v2_0) =
compare_values{L, L}(v1_0, v2_0)

predicate all_valid_existence{L}(__anonstruct_Map_5[..] map_22) =
\at((\forall integer i_4;
      (((0 <= i_4) && (i_4 <= (map_22.capacity :> integer))) ==>
        valid_existence{L}(get_item{L}(map_22, i_4)))),L)

predicate unique_keys{L}(__anonstruct_Map_5[..] map_23) =
(\forall integer i_5;
  (\forall integer j_1;
    (((((((0 <= i_5) && (i_5 < (\at(map_23.capacity,L) :> integer))) &&
          ((\at(map_23.capacity,L) :> integer) > j_1)) &&
         (j_1 > i_5)) &&
        item_exists{L}(get_item{L}(map_23, i_5))) &&
       item_exists{L}(get_item{L}(map_23, j_1))) ==>
      (! equal_keys_now{L}(get_key{L}(get_item{L}(map_23, i_5)),
                           get_key{L}(get_item{L}(map_23, j_1)))))))

predicate compare_items{L1, L2}(__anonstruct_Item_4[..] i1,
                                __anonstruct_Item_4[..] i2) =
(equal_keys{L1,
  L2}(\at(i1.key_2,L1), \at(i2.key_2,L2)) &&
  compare_values{L1,
  L2}(\at(i1.value_2,L1), \at(i2.value_2,L2)))

predicate count_lowers{L1, L2}(__anonstruct_Map_5[..] map_24) =
((\at(map_24.count,L1) :> integer) ==
  ((\at(map_24.count,L2) :> integer) + 1))

predicate same_count{L1, L2}(__anonstruct_Map_5[..] map_25) =
(\at(map_25.count,L1) == \at(map_25.count,L2))

predicate same_capacity{L1, L2}(__anonstruct_Map_5[..] map_26) =
(\at(map_26.capacity,L1) == \at(map_26.capacity,L2))

predicate same_items{L1, L2}(__anonstruct_Map_5[..] map_27) =
(\forall integer i_6;
  (((((0 <= i_6) && (i_6 < (\at(map_27.capacity,L2) :> integer))) &&
      item_exists{L1}(get_item{L1}(map_27, i_6))) &&
     item_exists{L2}(get_item{L2}(map_27, i_6))) ==>
    compare_items{L1,
    L2}(\at((map_27.items + i_6),L1), \at((map_27.items + i_6),L2))))

predicate no_mchg{L1, L2}(__anonstruct_Map_5[..] map_28,
                          __anonstruct_Key_2[..] key) =
(\forall integer i_7;
  (((((0 <= i_7) && (i_7 < (\at(map_28.capacity,L1) :> integer))) &&
      item_exists{L1}(get_item{L1}(map_28, i_7))) &&
     (! equal_keys{L1, L1}(key, get_key{L1}(get_item{L1}(map_28, i_7))))) ==>
    (\exists integer j_2;
      ((((0 <= j_2) && (j_2 < (\at(map_28.capacity,L2) :> integer))) &&
         item_exists{L2}(get_item{L2}(map_28, j_2))) &&
        compare_items{L1,
        L2}(get_item{L1}(map_28, i_7), get_item{L2}(map_28, j_2))))))

predicate is_key_in_map{L}(__anonstruct_Map_5[..] map_29,
                           __anonstruct_Key_2[..] k_3) =
(\exists integer i_8;
  ((((0 <= i_8) && (i_8 < (\at(map_29.capacity,L) :> integer))) &&
     item_exists{L}(get_item{L}(map_29, i_8))) &&
    equal_keys_now{L}(get_key{L}(get_item{L}(map_29, i_8)), k_3)))

predicate value_existed{L1, L2}(__anonstruct_Map_5[..] map_30,
                                __anonstruct_Key_2[..] key_0,
                                __anonstruct_Value_3[..] value) =
(\exists integer i_9;
  (((((0 <= i_9) && (i_9 < (\at(map_30.capacity,L1) :> integer))) &&
      item_exists{L1}(get_item{L1}(map_30, i_9))) &&
     equal_keys{L1,
     L2}(get_key{L1}(get_item{L1}(map_30, i_9)), \at(key_0,L2))) &&
    compare_values{L1,
    L2}(get_value{L1}(get_item{L1}(map_30, i_9)), \at(value,L2))))

predicate no_new{L1, L2}(__anonstruct_Map_5[..] map_31) =
(\forall integer i_10;
  ((((0 <= i_10) && (i_10 < (\at(map_31.capacity,L2) :> integer))) &&
     item_exists{L2}(get_item{L2}(map_31, i_10))) ==>
    (\exists integer j_3;
      ((((0 <= j_3) && (j_3 <= (\at(map_31.capacity,L1) :> integer))) &&
         item_exists{L1}(get_item{L1}(map_31, j_3))) &&
        compare_items{L1,
        L2}(get_item{L2}(map_31, i_10), get_item{L1}(map_31, j_3))))))

predicate is_valid_map{L}(__anonstruct_Map_5[..] map_32) =
\at((((((((is_valid_map_mem{L}(map_32) && is_valid_map_sizes{L}(map_32)) &&
           is_valid_items{L}(map_32)) &&
          count_ok{L}(map_32)) &&
         begin_ok{L}(map_32)) &&
        unique_keys{L}(map_32)) &&
       all_valid_existence{L}(map_32)) &&
      gap_ok{L}(map_32)),L)

unit finalizeMap(__anonstruct_Map_5[..] map_0)
  requires ((_C_40 : is_valid_map{Here}(map_0)) &&
             (_C_41 : ((! (map_0.items == null)) ==>
                        \freeable{Here}(map_0.items))));
behavior default:
  allocates \at(map_0.items,Old);
  ensures (_C_39 : ((! (\at(map_0,Old).items == null)) ==>
                     \allocable{Here}(\at(map_0,Old).items)));
{  
   (var int32 i);
   
   {  (if (_C_10 : (map_0 == null)) then 
      (goto return_label) else ());
      (if (_C_12 : ((_C_11 : map_0.items) == null)) then 
      (goto return_label) else ());
      
      {  (_C_13 : (i = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_17 : ((_C_18 : ((0 :> int32) <= i)) &&
                                (_C_19 : (i <= map_0.capacity))));
         behavior default:
           invariant (_C_16 : is_valid_map_mem{Here}(map_0));
         behavior default:
           invariant (_C_15 : all_valid_existence{Here}(map_0));
         variant (_C_14 : ((map_0.capacity :> integer) - (i :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_21 : (i < (_C_20 : map_0.capacity))) then () else 
                              (goto while_0_break)));
               
               {  (_C_25 : ((_C_24 : (_C_23 : ((_C_22 : map_0.items) + i)).existent) = (0 :> int32)));
                  
                  {  
                     (assert for default: (_C_26 : (astraver : valid_existence{Here}(
                                                   get_item{Here}(map_0,
                                                                  (i :> integer))))));
                     ()
                  }
               };
               (_C_29 : (i = (_C_28 : ((_C_27 : (i + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break : ())
      };
      
      {  
         (assert for default: (_C_30 : (astraver : (\at(map_0.capacity,Pre) ==
                                                     \at(map_0.capacity,Here)))));
         ()
      };
      (_C_32 : ((_C_31 : map_0.count) = (0 :> int32)));
      
      {  
         (assert for default: (_C_33 : (astraver : (((0 :> int32) <=
                                                      \at(map_0.count,Here)) &&
                                                     (\at(map_0.count,Here) <=
                                                       \at(map_0.count,Pre))))));
         ()
      };
      (_C_35 : (free((_C_34 : map_0.items))));
      
      {  
         (assert for default: (_C_36 : (astraver : \allocable{Here}(map_0.items))));
         ()
      };
      (_C_38 : ((_C_37 : map_0.items) = null));
      (return_label : 
      (return ()))
   }
}

int32 removeElement(__anonstruct_Map_5[..] map_3,
                    __anonstruct_Key_2[..] key_1,
                    __anonstruct_Value_3[..] value_1)
  requires ((_C_217 : is_valid_map{Here}(map_3)) &&
             ((_C_218 : \at((((\offset_min(\at(key_1,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(key_1,Here)) >= \at(0,Here))) &&
                              true),Here)) &&
               (_C_219 : ((value_1 == null) ||
                           \at((((\offset_min(\at(value_1,Here)) <=
                                   \at(0,Here)) &&
                                  (\offset_max(\at(value_1,Here)) >=
                                    \at(0,Here))) &&
                                 true),Here)))));
behavior default:
  assigns value_1.c,
  value_1.d;
  allocates \nothing;
  ensures (_C_204 : ((_C_205 : is_valid_map{Here}(\at(map_3,Old))) &&
                      ((_C_207 : same_capacity{Old, Here}(\at(map_3,Old))) &&
                        ((_C_209 : no_new{Old, Here}(\at(map_3,Old))) &&
                          ((_C_211 : equal_keys{Old,
                           Here}(\at(key_1,Old), \at(key_1,Old))) &&
                            ((_C_213 : (\forall integer i_11;
                                         (((0 <= i_11) &&
                                            (i_11 <
                                              (\at(map_3,Old).capacity :> integer))) ==>
                                           (! (equal_keys_now{Here}(\at(key_1,Old),
                                                                    get_key{Here}(
                                                                    get_item{Here}(
                                                                    \at(map_3,Old),
                                                                    i_11))) &&
                                                item_exists{Here}(get_item{Here}(
                                                                  \at(map_3,Old),
                                                                  i_11))))))) &&
                              ((_C_215 : ((\result == (0 :> int32)) ==>
                                           ((((\at(value_1,Old) == null) ||
                                               compare_values{Old,
                                               Here}(\at(value_1,Old),
                                                     \at(value_1,Old))) &&
                                              same_count{Old,
                                              Here}(\at(map_3,Old))) &&
                                             same_items{Old,
                                             Here}(\at(map_3,Old))))) &&
                                (_C_216 : ((\result == (1 :> int32)) ==>
                                            ((count_lowers{Old,
                                               Here}(\at(map_3,Old)) &&
                                               no_mchg{Old,
                                               Here}(\at(map_3,Old),
                                                     \at(key_1,Old))) &&
                                              ((\at(value_1,Old) == null) ||
                                                value_existed{Old,
                                                Here}(\at(map_3,Old),
                                                      \at(key_1,Old),
                                                      \at(value_1,Old)))))))))))));
{  
   (var int32 end_0);
   
   (var int32 i_0);
   
   (var int32 end_0_0);
   
   (var int32 j);
   
   (var int32 __retres);
   
   {  (if (_C_43 : (map_3 == null)) then 
      {  (_C_42 : (__retres = (-1 :> int32)));
         
         (goto return_label_0)
      } else ());
      (if (_C_46 : ((_C_45 : map_3.items) == null)) then 
      {  (_C_44 : (__retres = (-1 :> int32)));
         
         (goto return_label_0)
      } else ());
      (if (_C_48 : (key_1 == null)) then 
      {  (_C_47 : (__retres = (-1 :> int32)));
         
         (goto return_label_0)
      } else ());
      (_C_49 : (end_0 = (0 :> int32)));
      
      {  
         (assert for default: (_C_50 : (astraver : count_ok{Here}(map_3))));
         ()
      };
      
      {  (_C_51 : (i_0 = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_71 : (i_0 >= (0 :> int32)));
         behavior default:
           invariant (_C_68 : ((_C_69 : ((0 :> int32) <= map_3.count)) &&
                                (_C_70 : (map_3.count <= map_3.capacity))));
         behavior default:
           invariant (_C_67 : \at((if (\at(0,Here) <=
                                        \at(((map_3.capacity :> integer) - 1),Here)) then 
                                  (((\offset_min(\at(map_3.items,Here)) <=
                                      \at(0,Here)) &&
                                     (\offset_max(\at(map_3.items,Here)) >=
                                       \at(((map_3.capacity :> integer) - 1),Here))) &&
                                    (\forall integer __framac_tmp8;
                                      (((\at(0,Here) <= __framac_tmp8) &&
                                         (__framac_tmp8 <=
                                           \at(((map_3.capacity :> integer) -
                                                 1),Here))) ==>
                                        ((((\offset_min(\at((map_3.items +
                                                              __framac_tmp8).key_2,Here)) <=
                                             \at(0,Here)) &&
                                            (\offset_max(\at((map_3.items +
                                                               __framac_tmp8).key_2,Here)) >=
                                              \at(0,Here))) &&
                                           true) &&
                                          (((\offset_min(\at((map_3.items +
                                                               __framac_tmp8).value_2,Here)) <=
                                              \at(0,Here)) &&
                                             (\offset_max(\at((map_3.items +
                                                                __framac_tmp8).value_2,Here)) >=
                                               \at(0,Here))) &&
                                            true))))) else true),Here));
         behavior default:
           invariant (_C_66 : (\forall integer j_4;
                                (((0 <= j_4) && (j_4 < (i_0 :> integer))) ==>
                                  (! (equal_keys_now{Here}(get_key{Here}(
                                                           get_item{Here}(
                                                           map_3, j_4)),
                                                           key_1) &&
                                       item_exists{Here}(get_item{Here}(
                                                         map_3, j_4)))))));
         behavior default:
           invariant (_C_65 : is_valid_map_mem{Here}(map_3));
         behavior default:
           invariant (_C_64 : is_valid_map_sizes{Here}(map_3));
         behavior default:
           invariant (_C_63 : is_valid_items{Here}(map_3));
         behavior default:
           invariant (_C_62 : count_ok{Here}(map_3));
         behavior default:
           invariant (_C_61 : begin_ok{Here}(map_3));
         behavior default:
           invariant (_C_60 : unique_keys{Here}(map_3));
         behavior default:
           invariant (_C_59 : all_valid_existence{Here}(map_3));
         behavior default:
           invariant (_C_58 : gap_ok{Here}(map_3));
         behavior default:
           invariant (_C_57 : compare_values{Pre, Here}(value_1, value_1));
         behavior default:
           invariant (_C_56 : equal_keys{Pre, Here}(key_1, key_1));
         behavior default:
           invariant (_C_55 : no_new{Pre, Here}(map_3));
         behavior default:
           invariant (_C_54 : same_count{Pre, Here}(map_3));
         behavior default:
           invariant (_C_53 : same_items{Pre, Here}(map_3));
         variant (_C_52 : ((map_3.capacity :> integer) - (i_0 :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_73 : (i_0 < (_C_72 : map_3.capacity))) then () else 
                              (goto while_0_break_0)));
               
               {  
                  {  
                     (assert for default: (_C_74 : (astraver : ((i_0 :> integer) <=
                                                                 ((map_3.capacity :> integer) -
                                                                   1)))));
                     ()
                  };
                  (if (_C_195 : ((_C_194 : (_C_193 : (_C_192 : ((_C_191 : map_3.items) +
                                                                 i_0)).key_2).a) ==
                                  (_C_190 : key_1.a))) then (if (_C_189 : 
                                                                ((_C_188 : 
                                                                 (_C_187 : 
                                                                 (_C_186 : 
                                                                 ((_C_185 : map_3.items) +
                                                                   i_0)).key_2).b) ==
                                                                  (_C_184 : key_1.b))) then 
                                                            (if (_C_183 : 
                                                                ((_C_182 : 
                                                                 (_C_181 : 
                                                                 ((_C_180 : map_3.items) +
                                                                   i_0)).existent) ==
                                                                  (1 :> int32))) then 
                                                            {  
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_75 : 
                                                                  (astraver : 
                                                                  ((i_0 >=
                                                                    (1 :> int32)) ==>
                                                                    (count{Here}(
                                                                    map_3,
                                                                    ((i_0 :> integer) -
                                                                    1),
                                                                    (i_0 :> integer)) ==
                                                                    1)))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_76 : 
                                                                  (astraver : 
                                                                  ((i_0 >=
                                                                    (1 :> int32)) ==>
                                                                    (count{Here}(
                                                                    map_3,
                                                                    ((i_0 :> integer) -
                                                                    1),
                                                                    (i_0 :> integer)) >=
                                                                    1)))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_77 : 
                                                                  (astraver : 
                                                                  ((i_0 >=
                                                                    (1 :> int32)) ==>
                                                                    (count{Here}(
                                                                    map_3, 0,
                                                                    ((i_0 :> integer) -
                                                                    1)) ==
                                                                    (count{Here}(
                                                                    map_3, 0,
                                                                    ((i_0 :> integer) -
                                                                    1)) +
                                                                    count{Here}(
                                                                    map_3,
                                                                    ((i_0 :> integer) -
                                                                    1),
                                                                    (i_0 :> integer))))))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_78 : 
                                                                  (astraver : 
                                                                  (count{Here}(
                                                                    map_3, 0,
                                                                    (i_0 :> integer)) >=
                                                                    1))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_79 : 
                                                                  (astraver : 
                                                                  (count{Here}(
                                                                    map_3, 0,
                                                                    ((map_3.capacity :> integer) -
                                                                    1)) ==
                                                                    (count{Here}(
                                                                    map_3, 0,
                                                                    (i_0 :> integer)) +
                                                                    count{Here}(
                                                                    map_3,
                                                                    (i_0 :> integer),
                                                                    ((map_3.capacity :> integer) -
                                                                    1)))))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_80 : 
                                                                  (astraver : 
                                                                  (count{Here}(
                                                                    map_3, 0,
                                                                    (map_3.capacity :> integer)) >=
                                                                    1))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_81 : 
                                                                  (astraver : 
                                                                  ((map_3.count :> integer) ==
                                                                    count{Here}(
                                                                    map_3, 0,
                                                                    (map_3.capacity :> integer))))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_82 : 
                                                                  (astraver : 
                                                                  (map_3.count >=
                                                                    (1 :> int32)))));
                                                                  ()
                                                               };
                                                               (_C_87 : (
                                                               (_C_86 : map_3.count) = 
                                                               (_C_85 : (
                                                               (_C_84 : 
                                                               ((_C_83 : map_3.count) -
                                                                 (1 :> int32))) :> int32))));
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_88 : 
                                                                  (astraver : 
                                                                  (((0 :> int32) <=
                                                                    \at(map_3.count,Here)) &&
                                                                    (\at(map_3.count,Here) <=
                                                                    \at(map_3.capacity,Here))))));
                                                                  ()
                                                               };
                                                               (if (_C_101 : 
                                                                   (value_1 !=
                                                                    null)) then 
                                                               {  (_C_94 : (
                                                                  (_C_93 : value_1.c) = 
                                                                  (_C_92 : 
                                                                  (_C_91 : 
                                                                  (_C_90 : 
                                                                  ((_C_89 : map_3.items) +
                                                                    i_0)).value_2).c)));
                                                                  (_C_100 : (
                                                                  (_C_99 : value_1.d) = 
                                                                  (_C_98 : 
                                                                  (_C_97 : 
                                                                  (_C_96 : 
                                                                  ((_C_95 : map_3.items) +
                                                                    i_0)).value_2).d)))
                                                               } else ());
                                                               (if (_C_111 : 
                                                                   (i_0 ==
                                                                    (_C_110 : (
                                                                    (_C_109 : 
                                                                    ((_C_108 : map_3.capacity) -
                                                                    (1 :> int32))) :> int32)))) then 
                                                               {  (_C_105 : (
                                                                  (_C_104 : 
                                                                  (_C_103 : 
                                                                  ((_C_102 : map_3.items) +
                                                                    i_0)).existent) = (0 :> int32)));
                                                                  
                                                                  {  
                                                                    (assert for default: 
                                                                    (_C_106 : 
                                                                    (astraver : 
                                                                    (! is_key_in_map{Here}(
                                                                    map_3,
                                                                    key_1)))));
                                                                    ()
                                                                  };
                                                                  
                                                                  {  (_C_107 : (__retres = (1 :> int32)));
                                                                    
                                                                    (goto return_label_0)
                                                                  }
                                                               } else ());
                                                               (_C_112 : (end_0_0 = (0 :> int32)));
                                                               
                                                               {  (_C_113 : (j = i_0));
                                                                  (LoopEntry : 
                                                                  loop 
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_126 : 
                                                                    (j >=
                                                                    (0 :> int32)));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_125 : 
                                                                    (j >=
                                                                    i_0));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_124 : 
                                                                    (i_0 <=
                                                                    map_3.capacity));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_123 : 
                                                                    (j <=
                                                                    map_3.capacity));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_120 : 
                                                                    ((_C_121 : 
                                                                    ((0 :> int32) <=
                                                                    end_0_0)) &&
                                                                    (_C_122 : 
                                                                    (end_0_0 <=
                                                                    j))));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_117 : 
                                                                    ((_C_118 : 
                                                                    ((0 :> int32) <=
                                                                    end_0_0)) &&
                                                                    (_C_119 : 
                                                                    ((end_0_0 :> integer) <=
                                                                    ((map_3.capacity :> integer) -
                                                                    1)))));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_116 : 
                                                                    (map_3.count <=
                                                                    map_3.capacity));
                                                                  behavior default:
                                                                    invariant 
                                                                    (_C_115 : 
                                                                    \at(
                                                                    (if 
                                                                    (\at(0,Here) <=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here)) then 
                                                                    (((\offset_min(
                                                                    \at(map_3.items,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(map_3.items,Here)) >=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here))) &&
                                                                    (\forall integer __framac_tmp11;
                                                                    (((\at(0,Here) <=
                                                                    __framac_tmp11) &&
                                                                    (__framac_tmp11 <=
                                                                    \at(
                                                                    ((map_3.capacity :> integer) -
                                                                    1),Here))) ==>
                                                                    ((((\offset_min(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp11).key_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp11).key_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true) &&
                                                                    (((\offset_min(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp11).value_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_3.items +
                                                                    __framac_tmp11).value_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true))))) else true),Here));
                                                                  variant 
                                                                  (_C_114 : 
                                                                  ((map_3.capacity :> integer) -
                                                                    (j :> integer)));
                                                                  while (true)
                                                                  {  
                                                                    {
                                                                      (LoopCurrent : 
                                                                    (if 
                                                                    (_C_128 : 
                                                                    (j <
                                                                    (_C_127 : map_3.capacity))) then () else 
                                                                    (goto while_1_break)));
                                                                    
                                                                    {
                                                                      (if 
                                                                    (_C_133 : 
                                                                    ((_C_132 : 
                                                                    (_C_131 : 
                                                                    ((_C_130 : map_3.items) +
                                                                    j)).existent) ==
                                                                    (1 :> int32))) then 
                                                                    (_C_129 : (end_0_0 = j)) else ())
                                                                    };
                                                                    (_C_136 : (j = 
                                                                    (_C_135 : (
                                                                    (_C_134 : 
                                                                    (j +
                                                                    (1 :> int32))) :> int32))))
                                                                    }
                                                                  });
                                                                  (while_1_break : ())
                                                               };
                                                               (_C_145 : (
                                                               (_C_144 : 
                                                               (_C_143 : 
                                                               (_C_142 : 
                                                               ((_C_141 : map_3.items) +
                                                                 i_0)).key_2).a) = 
                                                               (_C_140 : 
                                                               (_C_139 : 
                                                               (_C_138 : 
                                                               ((_C_137 : map_3.items) +
                                                                 end_0_0)).key_2).a)));
                                                               (_C_154 : (
                                                               (_C_153 : 
                                                               (_C_152 : 
                                                               (_C_151 : 
                                                               ((_C_150 : map_3.items) +
                                                                 i_0)).key_2).b) = 
                                                               (_C_149 : 
                                                               (_C_148 : 
                                                               (_C_147 : 
                                                               ((_C_146 : map_3.items) +
                                                                 end_0_0)).key_2).b)));
                                                               (_C_163 : (
                                                               (_C_162 : 
                                                               (_C_161 : 
                                                               (_C_160 : 
                                                               ((_C_159 : map_3.items) +
                                                                 i_0)).value_2).c) = 
                                                               (_C_158 : 
                                                               (_C_157 : 
                                                               (_C_156 : 
                                                               ((_C_155 : map_3.items) +
                                                                 end_0_0)).value_2).c)));
                                                               (_C_172 : (
                                                               (_C_171 : 
                                                               (_C_170 : 
                                                               (_C_169 : 
                                                               ((_C_168 : map_3.items) +
                                                                 i_0)).value_2).d) = 
                                                               (_C_167 : 
                                                               (_C_166 : 
                                                               (_C_165 : 
                                                               ((_C_164 : map_3.items) +
                                                                 end_0_0)).value_2).d)));
                                                               (_C_176 : (
                                                               (_C_175 : 
                                                               (_C_174 : 
                                                               ((_C_173 : map_3.items) +
                                                                 end_0_0)).existent) = (0 :> int32)));
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_177 : 
                                                                  (astraver : 
                                                                  (! is_key_in_map{Here}(
                                                                  map_3,
                                                                  key_1)))));
                                                                  ()
                                                               };
                                                               
                                                               {  
                                                                  (assert for default: 
                                                                  (_C_178 : 
                                                                  (astraver : count_ok{Here}(
                                                                  map_3))));
                                                                  ()
                                                               };
                                                               
                                                               {  (_C_179 : (__retres = (1 :> int32)));
                                                                  
                                                                  (goto return_label_0)
                                                               }
                                                            } else ()) else ()) else ())
               };
               (_C_198 : (i_0 = (_C_197 : ((_C_196 : (i_0 + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break_0 : ())
      };
      
      {  
         (assert for default: (_C_199 : (astraver : no_new{Pre, Here}(map_3))));
         ()
      };
      
      {  
         (assert for default: (_C_200 : (astraver : (! is_key_in_map{Here}(
                                                    map_3, key_1)))));
         ()
      };
      
      {  
         (assert for default: (_C_201 : (astraver : same_count{Pre,
                                        Here}(map_3))));
         ()
      };
      
      {  
         (assert for default: (_C_202 : (astraver : same_capacity{Pre,
                                        Here}(map_3))));
         ()
      };
      (_C_203 : (__retres = (0 :> int32)));
      (return_label_0 : 
      (return __retres))
   }
}

int32 getElement(__anonstruct_Map_5[..] map_1, __anonstruct_Key_2[..] key_0,
                 __anonstruct_Value_3[..] value_0)
  requires ((_C_301 : is_valid_map{Here}(map_1)) &&
             ((_C_302 : \at((((\offset_min(\at(key_0,Here)) <= \at(0,Here)) &&
                               (\offset_max(\at(key_0,Here)) >= \at(0,Here))) &&
                              true),Here)) &&
               (_C_303 : \at((((\offset_min(\at(value_0,Here)) <=
                                 \at(0,Here)) &&
                                (\offset_max(\at(value_0,Here)) >=
                                  \at(0,Here))) &&
                               true),Here))));
behavior default:
  allocates \nothing;
  ensures (_C_272 : ((_C_273 : is_valid_map_mem{Here}(\at(map_1,Old))) &&
                      ((_C_275 : is_valid_map_sizes{Here}(\at(map_1,Old))) &&
                        ((_C_277 : is_valid_items{Here}(\at(map_1,Old))) &&
                          ((_C_279 : count_ok{Here}(\at(map_1,Old))) &&
                            ((_C_281 : begin_ok{Here}(\at(map_1,Old))) &&
                              ((_C_283 : unique_keys{Here}(\at(map_1,Old))) &&
                                ((_C_285 : all_valid_existence{Here}(
                                 \at(map_1,Old))) &&
                                  ((_C_287 : gap_ok{Here}(\at(map_1,Old))) &&
                                    ((_C_289 : same_capacity{Old,
                                     Here}(\at(map_1,Old))) &&
                                      ((_C_291 : same_count{Old,
                                       Here}(\at(map_1,Old))) &&
                                        ((_C_293 : same_items{Old,
                                         Here}(\at(map_1,Old))) &&
                                          ((_C_295 : equal_keys{Old,
                                           Here}(\at(key_0,Old),
                                                 \at(key_0,Old))) &&
                                            ((_C_297 : \at(\at((((\offset_min(
                                                                   \at(key_0,Old)) <=
                                                                   \at(0,Old)) &&
                                                                  (\offset_max(
                                                                    \at(key_0,Old)) >=
                                                                    \at(0,Old))) &&
                                                                 true),Here),Old)) &&
                                              ((_C_299 : ((\result ==
                                                            (1 :> int32)) ==>
                                                           (\exists integer i_12;
                                                             (((((0 <= i_12) &&
                                                                  (i_12 <
                                                                    (
                                                                    \at(map_1,Old).capacity :> integer))) &&
                                                                 equal_keys_now{Here}(
                                                                 \at(key_0,Old),
                                                                 get_key{Here}(
                                                                 get_item{Here}(
                                                                 \at(map_1,Old),
                                                                 i_12)))) &&
                                                                compare_values_now{Here}(
                                                                \at(value_0,Old),
                                                                get_value{Here}(
                                                                get_item{Here}(
                                                                \at(map_1,Old),
                                                                i_12)))) &&
                                                               item_exists{Here}(
                                                               get_item{Here}(
                                                               \at(map_1,Old),
                                                               i_12)))))) &&
                                                (_C_300 : ((\result ==
                                                             (0 :> int32)) ==>
                                                            (compare_values{Old,
                                                              Here}(\at(value_0,Old),
                                                                    \at(value_0,Old)) &&
                                                              (\forall integer i_13;
                                                                (((0 <= i_13) &&
                                                                   (i_13 <
                                                                    (\at(map_1,Old).capacity :> integer))) ==>
                                                                  (! 
                                                                  (equal_keys{Old,
                                                                    Here}(
                                                                    \at(key_0,Old),
                                                                    get_key{Here}(
                                                                    get_item{Here}(
                                                                    \at(map_1,Old),
                                                                    i_13))) &&
                                                                    item_exists{Old}(
                                                                    get_item{Old}(
                                                                    \at(map_1,Old),
                                                                    i_13))))))))))))))))))))))));
{  
   (var int32 i_1);
   
   (var int32 __retres_0);
   
   {  (if (_C_221 : (map_1 == null)) then 
      {  (_C_220 : (__retres_0 = (-1 :> int32)));
         
         (goto return_label_1)
      } else ());
      (if (_C_224 : ((_C_223 : map_1.items) == null)) then 
      {  (_C_222 : (__retres_0 = (-1 :> int32)));
         
         (goto return_label_1)
      } else ());
      (if (_C_226 : (key_0 == null)) then 
      {  (_C_225 : (__retres_0 = (-1 :> int32)));
         
         (goto return_label_1)
      } else ());
      
      {  (_C_227 : (i_1 = (0 :> int32)));
         (LoopEntry : 
         loop 
         behavior default:
           invariant (_C_232 : ((_C_233 : ((0 :> int32) <= i_1)) &&
                                 (_C_234 : (i_1 <= map_1.capacity))));
         behavior default:
           invariant (_C_231 : \at((if (\at(0,Here) <=
                                         \at(((map_1.capacity :> integer) -
                                               1),Here)) then (((\offset_min(
                                                                  \at(map_1.items,Here)) <=
                                                                  \at(0,Here)) &&
                                                                 (\offset_max(
                                                                   \at(map_1.items,Here)) >=
                                                                   \at(
                                                                   ((map_1.capacity :> integer) -
                                                                    1),Here))) &&
                                                                (\forall integer __framac_tmp16;
                                                                  (((\at(0,Here) <=
                                                                    __framac_tmp16) &&
                                                                    (__framac_tmp16 <=
                                                                    \at(
                                                                    ((map_1.capacity :> integer) -
                                                                    1),Here))) ==>
                                                                    ((((\offset_min(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp16).key_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp16).key_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true) &&
                                                                    (((\offset_min(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp16).value_2,Here)) <=
                                                                    \at(0,Here)) &&
                                                                    (\offset_max(
                                                                    \at(
                                                                    (map_1.items +
                                                                    __framac_tmp16).value_2,Here)) >=
                                                                    \at(0,Here))) &&
                                                                    true))))) else true),Here));
         behavior default:
           invariant (_C_230 : compare_values{Pre, Here}(value_0, value_0));
         behavior default:
           invariant (_C_229 : (\forall integer j_5;
                                 (((0 <= j_5) && (j_5 < (i_1 :> integer))) ==>
                                   (! (equal_keys_now{Here}(get_key{Here}(
                                                            get_item{Here}(
                                                            map_1, j_5)),
                                                            key_0) &&
                                        item_exists{Here}(get_item{Here}(
                                                          map_1, j_5)))))));
         variant (_C_228 : ((map_1.capacity :> integer) - (i_1 :> integer)));
         while (true)
         {  
            {  (LoopCurrent : (if (_C_236 : (i_1 < (_C_235 : map_1.capacity))) then () else 
                              (goto while_0_break_1)));
               
               {  (if (_C_267 : ((_C_266 : (_C_265 : ((_C_264 : map_1.items) +
                                                       i_1)).existent) ==
                                  (1 :> int32))) then (if (_C_263 : ((_C_262 : 
                                                                    (_C_261 : 
                                                                    (_C_260 : 
                                                                    ((_C_259 : map_1.items) +
                                                                    i_1)).key_2).a) ==
                                                                    (_C_258 : key_0.a))) then 
                                                      (if (_C_257 : ((_C_256 : 
                                                                    (_C_255 : 
                                                                    (_C_254 : 
                                                                    ((_C_253 : map_1.items) +
                                                                    i_1)).key_2).b) ==
                                                                    (_C_252 : key_0.b))) then 
                                                      {  (if (_C_238 : 
                                                             (value_0 ==
                                                               null)) then 
                                                         {  (_C_237 : (__retres_0 = (-1 :> int32)));
                                                            
                                                            (goto return_label_1)
                                                         } else ());
                                                         (_C_244 : ((_C_243 : value_0.c) = 
                                                         (_C_242 : (_C_241 : 
                                                                   (_C_240 : 
                                                                   ((_C_239 : map_1.items) +
                                                                    i_1)).value_2).c)));
                                                         (_C_250 : ((_C_249 : value_0.d) = 
                                                         (_C_248 : (_C_247 : 
                                                                   (_C_246 : 
                                                                   ((_C_245 : map_1.items) +
                                                                    i_1)).value_2).d)));
                                                         
                                                         {  (_C_251 : (__retres_0 = (1 :> int32)));
                                                            
                                                            (goto return_label_1)
                                                         }
                                                      } else ()) else ()) else ())
               };
               (_C_270 : (i_1 = (_C_269 : ((_C_268 : (i_1 + (1 :> int32))) :> int32))))
            }
         });
         (while_0_break_1 : ())
      };
      (_C_271 : (__retres_0 = (0 :> int32)));
      (return_label_1 : 
      (return __retres_0))
   }
}
