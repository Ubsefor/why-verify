module CMemory

    (* Семинарское *)
    use import int.Int
    use import map.Map

    type pointer 'a

    type alloc_table 'a

    type memory 'a = map (pointer 'a) 'a

    function offset_min (p : pointer 'a) (a : alloc_table 'a) : int

    function offset_max (p : pointer 'a) (a : alloc_table 'a) : int

    predicate same_block (p1 : pointer 'a) (p2 : pointer 'a)

    predicate is_alloc (p : pointer 'a) (a : alloc_table 'a) = (offset_min p a) <= (offset_max p a)

    predicate valid (p : pointer 'a) (a : alloc_table 'a) = (offset_min p a) <= 0 && (offset_max p a) >= 0

    predicate valid_range (p : pointer 'a) (a : alloc_table 'a) (left : int) (right : int) =
        left >= (offset_min p a) && right <=  (offset_max p a)

    function select (p : pointer 'a) (m : memory 'a) : 'a

    function store (p : pointer 'a) (m : memory 'a) (v : 'a) : memory 'a

    function shift (p : pointer 'a) (v : int) : pointer 'a

    function sub_pointer (p1 : pointer 'a) (p2 : pointer 'a) : int

    axiom valid_sub:
        forall p1 p2 : pointer 'a, a : alloc_table 'a.
            (same_block p1 p2)
                -> (sub_pointer p1 p2 = (offset_min p2 a) - (offset_min p1 a))

    axiom valid_select:
        forall a : alloc_table 'a, m : memory 'a, p : pointer 'a.
                (valid p a) -> (select p m = get m p)

    axiom valid_store:
         forall a : alloc_table 'a, m : memory 'a, p : pointer 'a, v : 'a.
            (valid p a) -> (store p m v = set m p v)

    axiom shift_min:
        forall p : pointer 'a, a : alloc_table 'a, v : int.
            (offset_min (shift p v) a) = (offset_min p a) - v

    axiom shift_max:
        forall p : pointer 'a, a : alloc_table 'a, v : int.
            (offset_max (shift p v) a) = (offset_max p a) - v

    axiom same_same:
        forall p : pointer 'a.
            (same_block p p) <-> true

    axiom same_eq:
        forall p1, p2 : pointer 'a.
            (same_block p1 p2) <-> (same_block p2 p1)

    axiom same_tr:
        forall p1, p2, p3 : pointer 'a.
            (same_block p1 p2) && (same_block p2 p3) -> (same_block p1 p3)

    axiom shift_same:
        forall p1, p2 : pointer 'a, v : int.
            (same_block (shift p1 v) p2) <-> (same_block p1 p2)

    val acc (p : pointer 'a) (m : memory 'a) (a : alloc_table 'a) : 'a
        requires {valid p a}
        ensures {result = select p m}

    val upd (p : pointer 'a) (m : memory 'a) (a : alloc_table 'a) (v : 'a) : memory 'a
        requires {valid p a}
        ensures {result = store p m v}

    val shft (p : pointer 'a) (v : int) : pointer 'a
        ensures {result = shift p v}
end

module Task31
  use import CMemory
  use import ref.Ref
  use import map.Map
  use import int.Int

  type edge = {
    from : int;
    tto : int;
    e_is : int;
  }

  type vertex = {
    payload : int;
    v_is : int;
  }

  type graph = {
    vertices : pointer vertex;
    vsize : int;
    edges : pointer edge;
    ecnt : int;
    esize : int;
  }

  (* переписываем что есть в сишном исходнике с фрамой *)

  (*
  predicate is_vertex(Graph *g, integer v) =
      0 <= v < g->vsize;
  *)

  predicate is_vertex (g : pointer graph) (v : int) (gmem : memory graph) =
      0 <= v < ((select g gmem).vsize)

  (*predicate edge_valid(Graph *g, integer k) =
    g->edges[k].existent ==>(shift (select g gmem).edges k)
    is_vertex(g, g->edges[k].from) &&
    is_vertex(g, g->edges[k].to) &&
    g->vertices[g->edges[k].from].existent &&
    g->vertices[g->edges[k].to].existent;*)

  predicate edge_valid (g : pointer graph) (k : int) (gmem : memory graph) (vmem : memory vertex) (emem : memory edge) =
    ((select (shift (select g gmem).edges k) emem).e_is <> 0) ->
      (is_vertex g ((select (shift (select g gmem).edges k) emem).from) gmem) &&
      (is_vertex g ((select (shift (select g gmem).edges k) emem).tto) gmem) &&
      ((select (shift ((select g gmem).vertices) ((select (shift (select g gmem).edges k) emem).from)) vmem).v_is <> 0) &&
      ((select (shift ((select g gmem).vertices) ((select (shift (select g gmem).edges k) emem).tto)) vmem).v_is <> 0)

  (*predicate edges_valid(Graph *g, integer n) =
    \forall integer k; 0 <= k < n ==> edge_valid(g, k);*)

  predicate edges_valid (g : pointer graph) (n : int) (gmem : memory graph) (vmem : memory vertex) (emem : memory edge) =
    forall k : int.
      0 <= k < n -> (edge_valid g k gmem vmem emem)

  (*
  predicate graph_valid(Graph *g) =
    g->vsize > 0 &&
      g->esize > 0 &&
      g->esize >= g->ecnt >= 0 &&
      \valid(g->vertices + (0 .. g->vsize - 1)) &&
    \valid(g->edges + (0 .. g->esize - 1)) &&
    edges_valid(g, g->ecnt) &&
    (\forall integer k; g->ecnt <= k < g->esize ==> !g->edges[k].existent);
  *)

  predicate graph_valid (g : pointer graph) (gmem : memory graph) (vmem : memory vertex) (emem : memory edge)
    (v_alloc : alloc_table vertex) (e_alloc : alloc_table edge) =
      ((select g gmem).vsize > 0) &&
      ((select g gmem).esize > 0) &&
      (0 <= (select g gmem).ecnt <= (select g gmem).esize ) &&
      (forall k : int. 0 <= k < ((select g gmem).vsize) -> (valid (shift (select g gmem).vertices k) v_alloc)) &&
      (forall k : int. 0 <= k < ((select g gmem).esize) -> (valid (shift (select g gmem).edges k) e_alloc)) &&
      (edges_valid g ((select g gmem).ecnt) gmem vmem emem) &&
      (forall k : int. ((select g gmem).ecnt) <= k < ((select g gmem).esize) -> ((select (shift (select g gmem).edges k) emem).e_is = 0))


(* predicate full(Graph *g) = range_is(g, 0, g->esize);
  predicate range_is(Graph *g, integer m, integer n) = \forall integer k; m <= k < n ==> g->edges[k].existent; *)

  predicate range_is (g : pointer graph) (gmem : memory graph) (emem : memory edge) (m : int) (n : int) =
    (forall k : int. m <= k < n -> ((select (shift (select g gmem).edges k) emem).e_is <> 0))

  predicate full (g : pointer graph) (gmem : memory graph) (emem : memory edge) =
    (range_is g gmem emem 0 (select g gmem).esize)

  (*
  axiomatic EdgesCount {
  logic integer count{L}(Graph *g, integer f, integer t, integer m, integer n);

  axiom count_zero: \forall Graph *g, integer f, t, m, n; m >= n ==>
      count(g, f, t, m, n) == 0;

predicate count_one_p{L}(Graph *g, integer f, integer t, integer m) =
      count(g, f, t, m, m + 1) == (g->edges[m].existent && g->edges[m].from == f && g->edges[m].to == t ? 1 : 0);

  axiom count_one{L}: \forall Graph *g, integer f, t, m; count_one_p(g, f, t, m);

  predicate count_split_p{L}(Graph *g, integer f, integer t, integer m, integer n, integer k) =
      count(g, f, t, m, k) == count(g, f, t, m, n) + count(g, f, t, n, k);

  axiom count_split{L}: \forall Graph *g, integer f, t, m, n, k; m <= n <= k ==>
      count_split_p(g, f, t, m, n, k);
  *)

  function count (g : pointer graph) (f : int) (t : int) (m : int) (n : int) (gmem : memory graph) (emem : memory edge) : int

  axiom count_zero:
    forall g : pointer graph, f t m n : int, gmem : memory graph, emem : memory edge.
      m >= n -> ((count g f t m n gmem emem) = 0)

  predicate count_one_p (g : pointer graph) (f : int) (t : int) (m : int) (gmem : memory graph) (emem : memory edge) =
    (count g f t m (m + 1) gmem emem) = (if 0 <> (select (shift (select g gmem).edges m) emem).e_is &&
    (select (shift (select g gmem).edges m) emem).from = f &&
    (select (shift (select g gmem).edges m) emem).tto = t then 1 else 0)

  axiom counter_one:
    forall g : pointer graph, f : int, t : int, m : int, gmem : memory graph, emem : memory edge.
      (count_one_p g f t m gmem emem)


  predicate count_split_p (g : pointer graph) (f : int) (t : int) (m : int) (n : int) (k : int)
    (gmem : memory graph) (emem : memory edge) =
      (count g f t m k gmem emem) = (count g f t m n gmem emem) + (count g f t n k gmem emem)

  axiom count_split:
    forall g : pointer graph, f t m n k : int, gmem : memory graph, emem : memory edge.
      m <= n <= k -> (count_split_p g f t m n k gmem emem)

  (*
  logic integer all_count(Graph *g, integer f, integer t) = count(g, f, t, 0, g->esize);
  *)

  function all_count (g : pointer graph) (f : int) (t : int) (gmem : memory graph) (emem : memory edge) : int =
    count g f t 0 (select g gmem).esize gmem emem

  (* insert text here *)

  lemma count_one_l: forall g : pointer graph, f t m : int, gmem : memory graph, emem : memory edge.
    count_one_p g f t m gmem emem && (count g f t m (m + 1) gmem emem) = (if 0 <> (select (shift (select g gmem).edges m) emem).e_is &&
      (select (shift (select g gmem).edges m) emem).from = f &&
      (select (shift (select g gmem).edges m) emem).tto = t then 1 else 0)

  lemma ecnt_empty_l: forall g : pointer graph, f t m : int, gmem : memory graph, vmem : memory vertex, emem : memory edge,
    v_alloc : alloc_table vertex, e_alloc : alloc_table edge.
      graph_valid g gmem vmem emem v_alloc e_alloc ->
        ((select g gmem).ecnt <= m - 1 < (select g gmem).esize) -> (count g f t (m - 1) m gmem emem) = 0

  let rec lemma ecnt_empty_l2 (g : pointer graph) (f : int) (t : int) (m : int)
    (gmem : memory graph) (vmem : memory vertex) (emem : memory edge) (g_alloc : alloc_table graph) (v_alloc : alloc_table vertex) (e_alloc : alloc_table edge)
    variant {m - (select g gmem).ecnt}
    requires { (select g gmem).ecnt <= m <= (select g gmem).esize }
    requires { (valid g g_alloc) && (graph_valid g gmem vmem emem v_alloc e_alloc) }
    ensures { (count g f t (select g gmem).ecnt m gmem emem) = 0 }
  = if m > (select g gmem).ecnt then (
    assert {(count g f t (m - 1) m gmem emem) = 0};
    assert {(count g f t (select g gmem).ecnt m gmem emem) =
      (count g f t (select g gmem).ecnt (m - 1) gmem emem) + (count g f t (m - 1) m gmem emem)};
    ecnt_empty_l2 g f t (m - 1) gmem vmem emem g_alloc v_alloc e_alloc
    )
    else ()

  lemma count_all_l: forall g : pointer graph, f t m : int, gmem : memory graph, vmem : memory vertex, emem : memory edge,
    v_alloc : alloc_table vertex, e_alloc : alloc_table edge.
      (0 <= (select g gmem).ecnt <= (select g gmem).esize) ->
        (all_count g f t gmem emem = (count g f t 0 (select g gmem).esize gmem emem)) &&
        (count g f t 0 (select g gmem).esize gmem emem) = (count g f t 0 (select g gmem).ecnt gmem emem) + (count g f t (select g gmem).ecnt (select g gmem).esize gmem emem) &&
        all_count g f t gmem emem = (count g f t 0 (select g gmem).ecnt gmem emem) + (count g f t (select g gmem).ecnt (select g gmem).esize gmem emem)

  lemma count_all_l2: forall g : pointer graph, gmem : memory graph, vmem : memory vertex, emem : memory edge, f : int, t : int, m : int.
    0 <= m - 1 <= (select g gmem).ecnt ->
      (count g f t 0 m gmem emem) = (count g f t 0 (m - 1) gmem emem) + (count g f t (m - 1) m gmem emem)

let count (g : pointer graph) (f : int) (t : int) (gmem : memory graph) (g_alloc : alloc_table graph)
  (emem : memory edge) (e_alloc : alloc_table edge) (vmem : memory vertex) (v_alloc : alloc_table vertex) : int
  (* graph valid *)
  requires { (valid g g_alloc) && (graph_valid g gmem vmem emem v_alloc e_alloc) }
  (* it is a vertex *)
  requires { is_vertex g t gmem }
  requires { is_vertex g f gmem }
  (* no. vertices > 0 *)
  requires { (select (shift (select g gmem).vertices t) vmem).v_is <> 0 }
  requires { (select (shift (select g gmem).vertices f) vmem).v_is <> 0 }
  (* result of count *)
  ensures {result = all_count g f t gmem emem}
  =
  let c = ref 0 in
  let i = ref 0 in
  while !i < (acc g gmem g_alloc).ecnt do
    variant { (select g gmem).ecnt - !i }
    invariant { 0 <= !i }
    invariant { !i <= (select g gmem).ecnt }
    invariant{ !c = (count g f t 0 !i gmem emem) }

    if (acc (shft (acc g gmem g_alloc).edges !i) emem e_alloc).e_is <> 0 &&
      (acc (shft (acc g gmem g_alloc).edges !i) emem e_alloc).from = f &&
      (acc (shft (acc g gmem g_alloc).edges !i) emem e_alloc).tto = t then (
        c := !c + 1;
        assert{(count g f t !i (!i + 1) gmem emem) = 1}
    )
    else (
        assert{(count g f t !i (!i + 1) gmem emem) = 0}
    );

    i := !i + 1;

  done;
  (* result is final *)
  assert{ !c = count g f t 0 (select g gmem).ecnt gmem emem };
  !c

  let add_edge (g : pointer graph) (f : int) (t : int) (gmem : memory graph) (g_alloc : alloc_table graph)
        (emem : memory edge) (e_alloc : alloc_table edge)
        (vmem : memory vertex) (v_alloc : alloc_table vertex) (*: (r_emem : memory edge, r_gmem : memory graph) *)
        requires {(valid g g_alloc) && (graph_valid g gmem vmem emem v_alloc e_alloc)}
        requires {is_vertex g f gmem}
        requires {is_vertex g t gmem}
        requires {(select (shift (select g gmem).vertices f) vmem).v_is <> 0}
        requires {(select (shift (select g gmem).vertices t) vmem).v_is <> 0}
        requires {not full g gmem emem}
        ensures {let (r_emem, r_gmem) = result in graph_valid g r_gmem vmem r_emem v_alloc e_alloc}
        ensures {let (r_emem, r_gmem) = result in all_count g f t r_gmem r_emem = (all_count g f t gmem emem + 1)}
        ensures {let (r_emem, r_gmem) = result in forall f2 : int, t2 : int. (f2 <> f || t2 <> t) -> (all_count g f2 t2 r_gmem r_emem) = (all_count g f2 t2 gmem emem)}
        =
        let new_emem = ref emem in
        let new_gmem = ref gmem in
        if (acc g gmem g_alloc).ecnt < (acc g gmem g_alloc).esize then (
            new_emem := upd (shft (acc g !new_gmem g_alloc).edges (acc g !new_gmem g_alloc).ecnt)
                !new_emem e_alloc {from = f; tto = t; e_is = 1};
            new_gmem := upd g !new_gmem g_alloc
                {   vertices = (acc g !new_gmem g_alloc).vertices;
                    vsize = (acc g !new_gmem g_alloc).vsize;
                    edges = (acc g !new_gmem g_alloc).edges;
                    ecnt = (acc g !new_gmem g_alloc).ecnt + 1;
                    esize = (acc g !new_gmem g_alloc).esize
                };

            let k2 = ref 0 in
            while !k2 < (acc g !new_gmem g_alloc).esize do
                (* loop counter variant *)
                variant {(select g !new_gmem).esize - !k2}
                (* for loop counter *)
                invariant {!k2 >= 0}
                invariant {!k2 <= (select g !new_gmem).esize}
                (* for all other edges count stays the same *)
                invariant { forall j : int. 0 <= j <= !k2 /\ j <= (select g !new_gmem).esize
                    -> forall f2 : int, t2 : int. f2 <> f \/ t2 <> t
                        -> (count g f2 t2 0 j !new_gmem !new_emem) = (count g f2 t2 0 j gmem emem)}

                k2 := !k2 + 1;
            done;

            let k = ref 0 in
            while !k < (acc g !new_gmem g_alloc).esize do
                (* loop counter variant *)
                variant {(select g !new_gmem).esize - !k}
                (* for loop counter *)
                invariant {!k >= 0}
                invariant {!k <= (select g !new_gmem).esize}
                (* memory stays the same, except for ecnt-1 *)
                invariant { forall j : int. 0 <= j <= !k /\ j < (select g !new_gmem).esize ->
                    j <> ((select g !new_gmem).ecnt - 1) ->
                    (select (shift (select g !new_gmem).edges j) !new_emem) = (select (shift (select g gmem).edges j) emem)}
                invariant { forall j : int. 0 <= j < !k && j <> ((select g !new_gmem).ecnt - 1)
                    -> (count g f t j (j + 1) !new_gmem !new_emem) = (count g f t j (j + 1) gmem emem) }
                invariant { (count g f t 0 !k !new_gmem !new_emem) =
                    (count g f t 0 !k gmem emem) + (if !k < ((select g !new_gmem).ecnt - 1) + 1 then 0 else 1)}

                k := !k + 1;
            done;

            let k3 = ref 0 in
            while !k3 < (acc g !new_gmem g_alloc).esize do
                (* loop counter variant *)
                variant {(select g !new_gmem).esize - !k3}
                (* for loop counter *)
                invariant {!k3 >= 0}
                invariant {!k3 <= (select g !new_gmem).esize}
                (* for all other edges count stays the same *)
                invariant { forall j : int. 0 <= j <= !k3 /\ j < (select g !new_gmem).esize
                    -> edge_valid g j !new_gmem vmem !new_emem }

                k3 := !k3 + 1;
            done;
            assert {count g f t ((select g !new_gmem).ecnt - 1) (select g !new_gmem).ecnt !new_gmem !new_emem = 1};
        ) else (
            let brk = ref 0 in
            let i = ref 0 in
            assert{ exists k : int. 0 <= k <= (select g !new_gmem).ecnt - 1 && 0 = (select (shift (select g !new_gmem).edges k) !new_emem).e_is };
            while !i < (acc g !new_gmem g_alloc).ecnt do
                variant {(select g !new_gmem).ecnt - !i}
                invariant {!i >= 0}
                invariant {!i <= (select g !new_gmem).ecnt}

                invariant { !brk = 1 || (!brk = 0 && exists k : int. !i <= k <= (select g !new_gmem).ecnt - 1 && 0 = (select (shift (select g !new_gmem).edges k) !new_emem).e_is ) }
                invariant { graph_valid g !new_gmem vmem !new_emem v_alloc e_alloc }
                invariant { (all_count g f t !new_gmem !new_emem) = (all_count g f t gmem emem) + !brk }
                invariant { forall f2:int, t2:int. f2 <> f \/ t2 <> t -> (all_count g f2 t2 !new_gmem !new_emem) = (all_count g f2 t2 gmem emem) }

                'Pre:
                if !brk = 0 && (acc (shft (acc g !new_gmem g_alloc).edges !i) !new_emem e_alloc).e_is = 0 then (
                    new_emem := upd (shft (acc g !new_gmem g_alloc).edges !i)
                        !new_emem e_alloc {from = f; tto = t; e_is = 1};
                    brk := 1;
                    let k1 = ref 0 in
                    while !k1 < (acc g !new_gmem g_alloc).esize do
                        variant {(select g !new_gmem).esize - !k1}
                        (* for loop counter *)
                        invariant {!k1 >= 0}
                        invariant {!k1 <= (select g !new_gmem).esize}

                        invariant { forall j : int.
                            0 <= j <= !k1 /\ j < (select g !new_gmem).esize -> j <> !i
                                -> (select (shift (select g !new_gmem).edges j) !new_emem) =
                                    (select (shift (select g !new_gmem).edges j) (at !new_emem 'Pre)) }
                        invariant { forall j : int. 0 <= j <= !k1 /\ j <= (select g !new_gmem).esize
                            -> forall f2 : int, t2 : int. f2 <> f \/ t2 <> t
                                -> (count g f2 t2 0 j !new_gmem !new_emem) =
                                    (count g f2 t2 0 j !new_gmem (at !new_emem 'Pre)) }
                        invariant { forall j : int.
                            0 <= j <= !k1 /\ j < (select g !new_gmem).esize -> j <> !i ->
                              edge_valid g j !new_gmem vmem !new_emem}
                        k1 := !k1 + 1;
                    done;
                    let k3 = ref 0 in
                    while !k3 < (acc g !new_gmem g_alloc).esize do
                        variant {(select g !new_gmem).esize - !k3}
                        (* for loop counter *)
                        invariant {!k3 >= 0}
                        invariant {!k3 <= (select g !new_gmem).esize}

                        invariant { (count g f t 0 !k3 !new_gmem !new_emem) =
                            (count g f t 0 !k3 !new_gmem (at !new_emem 'Pre)) + (if !k3 < !i + 1 then 0 else 1)}

                        k3 := !k3 + 1;
                    done;
                    assert { edge_valid g !i !new_gmem vmem !new_emem};
                    assert { forall k : int. 0 <= k < (select g !new_gmem).esize ->
                        edge_valid g k !new_gmem vmem !new_emem };
                    assert {(all_count g f t !new_gmem !new_emem) = (all_count g f t (at !new_gmem 'Pre) (at !new_emem 'Pre)) + 1};
                );
                i := !i + 1;
            done;
            assert{ !brk = 1 }
        );

        (!new_emem, !new_gmem)

end